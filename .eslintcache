[{"C:\\Users\\Administrator\\Desktop\\cd\\src\\index.js":"1","C:\\Users\\Administrator\\Desktop\\cd\\src\\config.js":"2","C:\\Users\\Administrator\\Desktop\\cd\\src\\reportWebVitals.js":"3","C:\\Users\\Administrator\\Desktop\\cd\\src\\App.js":"4","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\reducers\\orderReducer.js":"5","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\reducers\\loginReducer.js":"6","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\SignUp\\signupform.js":"7","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Home.js":"8","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderStatus\\orderSuccess.js":"9","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\Checkout.js":"10","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderStatus\\orderFailure.js":"11","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Help\\Help.js":"12","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\MyOrders\\MyOrders.js":"13","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetail.js":"14","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Profile\\MyProfile.js":"15","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\AddUser.js":"16","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Navigation.js":"17","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\Inventory.js":"18","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\userManager.js":"19","C:\\Users\\Administrator\\Desktop\\cd\\src\\libs\\contextLibs.js":"20","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\EditUser.js":"21","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UI\\Spinner.js":"22","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\ModifyRoleAccess.js":"23","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\ShowUser.js":"24","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\PreferencePage.js":"25","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\actionTypes.js":"26","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\ForwardedCheckout.js":"27","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\index.js":"28","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\ResetPassword\\ResetPassword.js":"29","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\Welcome\\welcomePage.js":"30","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\Login\\loginform.js":"31","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\order.js":"32","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\OrderSummary.js":"33","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\LocationDetails.js":"34","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\login.js":"35","C:\\Users\\Administrator\\Desktop\\cd\\src\\Constants\\constants.js":"36","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\ProductDetails.js":"37","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetails\\CompleteDetails.js":"38","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\AddProductForm.js":"39","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\ShowProducts.js":"40","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\EditForm.js":"41","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetails\\OrderDetails.js":"42","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\AccountDetails\\AccountIndex.js":"43","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyKYCForm.js":"44","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyDetails\\IndexCompanyDetails.js":"45","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyDetails\\FormCompanyDetails.js":"46","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\TaxDetails\\TaxIndex.js":"47","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\TaxDetails\\TaxForm.js":"48","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\AccountDetails\\AccountForm.js":"49","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\KYCPage.js":"50","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyKycPanel.js":"51","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\PaymentIndex.js":"52","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\PriceCalculator\\PriceCalculator.js":"53","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Upload\\Upload.js":"54","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Progress\\Progress.js":"55","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Dropzone\\Dropzone.js":"56"},{"size":2146,"mtime":1613065953457,"results":"57","hashOfConfig":"58"},{"size":418,"mtime":1613065953457,"results":"59","hashOfConfig":"58"},{"size":375,"mtime":1613065953459,"results":"60","hashOfConfig":"58"},{"size":6797,"mtime":1613065953412,"results":"61","hashOfConfig":"58"},{"size":4378,"mtime":1613065953461,"results":"62","hashOfConfig":"58"},{"size":1317,"mtime":1613065953461,"results":"63","hashOfConfig":"58"},{"size":14137,"mtime":1613367230150,"results":"64","hashOfConfig":"58"},{"size":204,"mtime":1613065953420,"results":"65","hashOfConfig":"58"},{"size":239,"mtime":1613065953449,"results":"66","hashOfConfig":"58"},{"size":13269,"mtime":1613357231583,"results":"67","hashOfConfig":"58"},{"size":208,"mtime":1613065953449,"results":"68","hashOfConfig":"58"},{"size":205,"mtime":1613065953420,"results":"69","hashOfConfig":"58"},{"size":9527,"mtime":1613376568183,"results":"70","hashOfConfig":"58"},{"size":3493,"mtime":1613109780846,"results":"71","hashOfConfig":"58"},{"size":8228,"mtime":1613065953453,"results":"72","hashOfConfig":"58"},{"size":7587,"mtime":1613211339115,"results":"73","hashOfConfig":"58"},{"size":9882,"mtime":1613201462152,"results":"74","hashOfConfig":"58"},{"size":2511,"mtime":1613101541729,"results":"75","hashOfConfig":"58"},{"size":3879,"mtime":1613101541753,"results":"76","hashOfConfig":"58"},{"size":174,"mtime":1613065953458,"results":"77","hashOfConfig":"58"},{"size":7835,"mtime":1613211263655,"results":"78","hashOfConfig":"58"},{"size":348,"mtime":1613065953454,"results":"79","hashOfConfig":"58"},{"size":5907,"mtime":1613101541753,"results":"80","hashOfConfig":"58"},{"size":6394,"mtime":1613065953455,"results":"81","hashOfConfig":"58"},{"size":183,"mtime":1613065953452,"results":"82","hashOfConfig":"58"},{"size":1583,"mtime":1613065953459,"results":"83","hashOfConfig":"58"},{"size":10375,"mtime":1613357231584,"results":"84","hashOfConfig":"58"},{"size":521,"mtime":1613065953460,"results":"85","hashOfConfig":"58"},{"size":4489,"mtime":1613065953415,"results":"86","hashOfConfig":"58"},{"size":1561,"mtime":1613065953417,"results":"87","hashOfConfig":"58"},{"size":7552,"mtime":1613065953414,"results":"88","hashOfConfig":"58"},{"size":3230,"mtime":1613065953460,"results":"89","hashOfConfig":"58"},{"size":12437,"mtime":1613357231586,"results":"90","hashOfConfig":"58"},{"size":11827,"mtime":1613357231585,"results":"91","hashOfConfig":"58"},{"size":982,"mtime":1613065953460,"results":"92","hashOfConfig":"58"},{"size":3108,"mtime":1613384797625,"results":"93","hashOfConfig":"58"},{"size":35395,"mtime":1613387826880,"results":"94","hashOfConfig":"58"},{"size":8961,"mtime":1613110144993,"results":"95","hashOfConfig":"58"},{"size":16262,"mtime":1613210987158,"results":"96","hashOfConfig":"58"},{"size":10795,"mtime":1613369026208,"results":"97","hashOfConfig":"58"},{"size":11130,"mtime":1613101541721,"results":"98","hashOfConfig":"58"},{"size":7892,"mtime":1613392027561,"results":"99","hashOfConfig":"58"},{"size":2464,"mtime":1613065953424,"results":"100","hashOfConfig":"58"},{"size":13337,"mtime":1613213566892,"results":"101","hashOfConfig":"58"},{"size":3383,"mtime":1613065953426,"results":"102","hashOfConfig":"58"},{"size":6524,"mtime":1613213772029,"results":"103","hashOfConfig":"58"},{"size":2562,"mtime":1613065953446,"results":"104","hashOfConfig":"58"},{"size":7814,"mtime":1613213871941,"results":"105","hashOfConfig":"58"},{"size":5153,"mtime":1613101541729,"results":"106","hashOfConfig":"58"},{"size":7278,"mtime":1613065953444,"results":"107","hashOfConfig":"58"},{"size":6782,"mtime":1613065953444,"results":"108","hashOfConfig":"58"},{"size":17845,"mtime":1613387153535,"results":"109","hashOfConfig":"58"},{"size":29555,"mtime":1613383924196,"results":"110","hashOfConfig":"58"},{"size":4641,"mtime":1613125539825,"results":"111","hashOfConfig":"58"},{"size":414,"mtime":1613065953451,"results":"112","hashOfConfig":"58"},{"size":2251,"mtime":1613065953450,"results":"113","hashOfConfig":"58"},{"filePath":"114","messages":"115","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"1ogkf18",{"filePath":"117","messages":"118","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"119","messages":"120","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"121","messages":"122","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"123","usedDeprecatedRules":"116"},{"filePath":"124","messages":"125","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"126","usedDeprecatedRules":"116"},{"filePath":"127","messages":"128","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"129","usedDeprecatedRules":"116"},{"filePath":"130","messages":"131","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"132","messages":"133","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"134","usedDeprecatedRules":"116"},{"filePath":"135","messages":"136","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"137","messages":"138","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"139","usedDeprecatedRules":"116"},{"filePath":"140","messages":"141","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"142","messages":"143","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"144","messages":"145","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"146","messages":"147","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"148","usedDeprecatedRules":"116"},{"filePath":"149","messages":"150","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"151","usedDeprecatedRules":"116"},{"filePath":"152","messages":"153","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"154","messages":"155","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"156","messages":"157","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"158","usedDeprecatedRules":"116"},{"filePath":"159","messages":"160","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"161","usedDeprecatedRules":"116"},{"filePath":"162","messages":"163","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"164","messages":"165","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"166","messages":"167","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"168","messages":"169","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"170","usedDeprecatedRules":"116"},{"filePath":"171","messages":"172","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"173","messages":"174","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"175","messages":"176","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"177","messages":"178","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"179","usedDeprecatedRules":"116"},{"filePath":"180","messages":"181","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"182","messages":"183","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"184","messages":"185","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"186","messages":"187","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"188","usedDeprecatedRules":"116"},{"filePath":"189","messages":"190","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"191","messages":"192","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"193","usedDeprecatedRules":"116"},{"filePath":"194","messages":"195","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"196","usedDeprecatedRules":"116"},{"filePath":"197","messages":"198","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"199","messages":"200","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"201","messages":"202","errorCount":0,"warningCount":9,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"203","messages":"204","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"205","usedDeprecatedRules":"116"},{"filePath":"206","messages":"207","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"208","usedDeprecatedRules":"116"},{"filePath":"209","messages":"210","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"211","messages":"212","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"213","usedDeprecatedRules":"116"},{"filePath":"214","messages":"215","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"216","messages":"217","errorCount":0,"warningCount":10,"fixableErrorCount":0,"fixableWarningCount":0,"source":"218","usedDeprecatedRules":"116"},{"filePath":"219","messages":"220","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"221","usedDeprecatedRules":"116"},{"filePath":"222","messages":"223","errorCount":0,"warningCount":11,"fixableErrorCount":0,"fixableWarningCount":0,"source":"224","usedDeprecatedRules":"116"},{"filePath":"225","messages":"226","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":"227","usedDeprecatedRules":"116"},{"filePath":"228","messages":"229","errorCount":0,"warningCount":12,"fixableErrorCount":0,"fixableWarningCount":0,"source":"230","usedDeprecatedRules":"116"},{"filePath":"231","messages":"232","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"233","usedDeprecatedRules":"116"},{"filePath":"234","messages":"235","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":"236","usedDeprecatedRules":"116"},{"filePath":"237","messages":"238","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"239","usedDeprecatedRules":"116"},{"filePath":"240","messages":"241","errorCount":0,"warningCount":7,"fixableErrorCount":0,"fixableWarningCount":0,"source":"242","usedDeprecatedRules":"116"},{"filePath":"243","messages":"244","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"245","messages":"246","errorCount":0,"warningCount":5,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"247","messages":"248","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"249","messages":"250","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},{"filePath":"251","messages":"252","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"116"},"C:\\Users\\Administrator\\Desktop\\cd\\src\\index.js",[],["253","254"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\config.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\reportWebVitals.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\App.js",["255"],"import { Switch, Route, Redirect } from 'react-router-dom';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\n\r\nimport Navigation from './components/Navigation'\r\nimport Home from './components/Home'\r\nimport Form from './components/Forms/Checkout'\r\nimport RedirForm from './components/Forms/ForwardedCheckout'\r\nimport MyProfile from './components/Profile/MyProfile'\r\nimport PriceCalculator from './components/PriceCalculator/PriceCalculator'\r\nimport Success from './components/OrderStatus/orderSuccess'\r\nimport Failure from './components/OrderStatus/orderFailure'\r\nimport MyOrders from './components/MyOrders/MyOrders'\r\nimport OrderDetail from './components/OrderDetail'\r\nimport Inventory from './components/Inventory/Inventory'\r\nimport Help from './components/Help/Help'\r\nimport SignUp from './components/Auth/SignUp/signupform.js'\r\nimport Login from './components/Auth/Login/loginform'\r\nimport {connect} from 'react-redux';\r\nimport Welcome from './components/Auth/Welcome/welcomePage';\r\nimport ResetPassword from './components/Auth/ResetPassword/ResetPassword'\r\nimport PaymentIndex from './components/Payments/PaymentIndex'\r\n\r\n\r\nimport UserManager from './components/UserManager/userManager'\r\nimport ShowUser from './components/UserManager/ShowUser'\r\nimport AddUser from './components/UserManager/AddUser'\r\nimport EditUser from './components/UserManager/EditUser'\r\nimport ModifyRoleAccesses from './components/UserManager/ModifyRoleAccess'\r\n\r\nimport KYC from './components/KYC/KYCPage'\r\nimport KYCPanel from './components/KYC/CompanyKycPanel'\r\n//import BasicInfoIndex from './components/KYC/BasicInfoKyc/BasicInfoIndex'\r\n\r\n\r\n\r\nimport Preference from './components/Preference/PreferencePage'\r\nimport { Auth ,API} from \"aws-amplify\";\r\nimport { useEffect, useState } from 'react';\r\nimport Spinner from './components/UI/Spinner';\r\nimport * as actions from './store/actions/index'\r\nimport { AppContext } from './libs/contextLibs'\r\n\r\n\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    display: 'flex',\r\n  },\r\n  toolbar: {\r\n    display: 'flex',\r\n    alignItems: 'center',\r\n    justifyContent: 'flex-end',\r\n    padding: theme.spacing(0,0),\r\n    // necessary for content to be below app bar\r\n    ...theme.mixins.toolbar,\r\n  },\r\n  content: {\r\n    flexGrow: 1,\r\n    padding: theme.spacing(4),\r\n  },\r\n}));\r\n\r\nfunction App(props) {\r\n  const classes = useStyles();\r\n  const [isAuthenticated, userHasAuthenticated] = useState(false);\r\n  const [isAuthenticating,setIsAuthenticating] = useState(true);\r\n\r\n\r\n  //const [data, setData] = useState([]);\r\n  // const callAPIGateway = async () => {\r\n  //   try{\r\n  //   const customerEmail = \"prashantkumarsingh9423@gmail.com\"\r\n  //   const result = await API.get(\"GoFlexeOrderPlacement\", `/customerorder/customer/${customerEmail}`)\r\n  //   console.log(result);\r\n  //   console.log(\"Set data ato : \", result)\r\n  //   const credentials = await Auth.currentCredentials();\r\n  //   console.log(Auth.essentialCredentials(credentials))}\r\n  //   catch(e){\r\n  //     console.log(\"PKSING\"+e)\r\n  //   }\r\n  // }\r\n\r\n  \r\n\r\n \r\n  useEffect(() => {\r\n    Auth.currentUserInfo()\r\n    .then(res=>console.log(res))\r\n    .catch(err=>console.log(err))\r\n    onLoad();\r\n  }, []);\r\n  \r\n  async function onLoad() {\r\n    try {\r\n      await Auth.currentSession();\r\n      userHasAuthenticated(true);\r\n      const user= await Auth.currentUserInfo()\r\n      console.log(user)\r\n    }\r\n    catch(e) {\r\n      if (e !== 'No current user') {\r\n        alert(e);\r\n      }\r\n    }\r\n  \r\n    setIsAuthenticating(false);\r\n  }\r\n  if(isAuthenticating){\r\n    return(\r\n      <Spinner />\r\n    );\r\n  }\r\n  if(!isAuthenticated){\r\n    return (\r\n      <div className={classes.root}>\r\n          <Welcome />\r\n          <main\r\n        className={classes.content}\r\n      >\r\n        <div className={classes.toolbar} />\r\n        <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\r\n          <Switch>\r\n          \r\n          <Route exact path=\"/signup\" component={SignUp} />\r\n          <Route exact path=\"/login\" component={Login} />\r\n          <Route exact path='/resetPassword' component={ResetPassword} />\r\n          <Redirect to='/signup' />\r\n         \r\n        </Switch>\r\n        </AppContext.Provider>\r\n        </main>\r\n      </div>\r\n    );\r\n  }\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\r\n      <Navigation />\r\n      </AppContext.Provider>\r\n      \r\n      <main\r\n        className={classes.content}\r\n      >\r\n        <div className={classes.toolbar} />\r\n        <AppContext.Provider value={{ isAuthenticated, userHasAuthenticated }}>\r\n        <Switch>\r\n          {/* Home page (DashBoard Content) */}\r\n          <Route exact path=\"/\" component={Home} />\r\n          {/* Order Form */}\r\n          <Route exact path=\"/orders\" component={Form} />\r\n          <Route exact path=\"/ordersRedir\" component={RedirForm} />\r\n          <Route exact path=\"/myorders\" component={MyOrders} />\r\n          <Route exact path=\"/orderSuccess\" component={Success} />\r\n          <Route exact path=\"/orderFailure\" component={Failure} />\r\n          <Route exact path=\"/profile\" component={MyProfile} />\r\n          <Route exact path=\"/inventory-manager\" component={Inventory} />\r\n          <Route exact path=\"/help\" component={Help} />\r\n          <Route exact path='/userManager' component={UserManager} />\r\n          <Route exact path='/adduser' component={AddUser} />\r\n          <Route exact path='/modifyRoleAccesses' component={ModifyRoleAccesses} />\r\n          <Route exact path='/kyc' component={KYC} />\r\n          <Route exact path='/kycPanel' component={KYCPanel} />\r\n          <Route exact path='/preference' component={Preference} />\r\n          <Route exact path='/payment' component={PaymentIndex} />\r\n          <Route path='/order/:id' render={(props) => {\r\n                    return ( <OrderDetail {...props } /> )\r\n                }} />\r\n          <Route path='/user/:id' render={(props) => {\r\n                    return ( <ShowUser {...props } /> )\r\n                }} />\r\n          <Route path='/editUser/:id' render={(props) => {\r\n                    return ( <EditUser {...props } /> )\r\n                }} />\r\n          {/* Price Calculator */}\r\n          <Route exact path=\"/price-calculator\" component={PriceCalculator} />\r\n          <Route exact path='/resetPassword' component={ResetPassword} />\r\n          <Redirect to='/' />\r\n        </Switch>\r\n        </AppContext.Provider>\r\n      </main>\r\n    </div>\r\n  );\r\n}\r\n\r\n\r\n\r\nconst mapStateToProps=state=>{\r\n  return{\r\n      hasLogged:state.login.hasLogged\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n  return {\r\n      setLogged:(Val)=>dispatch(actions.setLoggedState(Val)),\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(App);\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\reducers\\orderReducer.js",["256"],"import * as actionTypes from '../actions/actionTypes';\r\nconst initialState={\r\n    name:'Prashant',\r\n    pickupAddress:'',\r\n    pickupPin:'',\r\n    destinationAddress:'',\r\n    destinationPin:'',\r\n    height:'',\r\n    width:'',\r\n    length:'',\r\n    noOfUnits:'',\r\n    weightPerUnit:'',\r\n    unit:'',\r\n    phone:'6350108758',\r\n    email:'prashantkumarsingh9423@gmail.com',\r\n    companyName:'GoFlexe',\r\n    pickupDate:'',\r\n    deliveryDate:'',\r\n    pickupSlot:'',\r\n    additionalNote:'',\r\n    measureable:true,\r\n    totalWeight:'',\r\n    density:'',\r\n    chosenProducts:[]\r\n}\r\n\r\nconst reducer=(state=initialState,action)=>{\r\n    switch(action.type)\r\n    {\r\n        case actionTypes.RESET_STATE:\r\n            return{\r\n                initialState\r\n            }\r\n        case actionTypes.SET_NAME:\r\n            return {\r\n                ...state,\r\n                name:action.name\r\n            }\r\n        case actionTypes.SET_PICKUP_ADDRESS:\r\n            return{\r\n                ...state,\r\n                pickupAddress:action.pickupaddress\r\n            }\r\n        case actionTypes.SET_PICKUP_PIN:\r\n            return{\r\n                ...state,\r\n                pickupPin:action.pickupPin\r\n            }\r\n        case actionTypes.SET_DESTINATION_ADDRESS:\r\n            return{\r\n                ...state,\r\n                destinationAddress:action.destinationaddress\r\n            }\r\n        case actionTypes.SET_DESTINATION_PIN:\r\n            return{\r\n                ...state,\r\n                destinationPin:action.destinationpin\r\n            }\r\n        case actionTypes.SET_HEIGHT:\r\n            return{\r\n                ...state,\r\n                height:action.height\r\n            }\r\n        \r\n        case actionTypes.SET_WIDTH:\r\n            return{\r\n                ...state,\r\n                width:action.width\r\n            }\r\n        case actionTypes.SET_LENGTH:\r\n                return{\r\n                    ...state,\r\n                    length:action.length\r\n                }\r\n        case actionTypes.SET_UNIT:\r\n            return{\r\n                ...state,\r\n                unit:action.unit\r\n            }\r\n        case actionTypes.SET_NUMBER_OF_UNITS:\r\n                return{\r\n                    ...state,\r\n                    noOfUnits:action.noOfUnits\r\n                }\r\n\r\n        case actionTypes.SET_WEIGHT_PER_UNIT:\r\n                return{\r\n                        ...state,\r\n                        weightPerUnit:action.weightPerUnit\r\n                }\r\n        case actionTypes.SET_PHONE:\r\n                    return{\r\n                            ...state,\r\n                            phone:action.phone\r\n                    }\r\n        case actionTypes.SET_EMAIL:\r\n                        return{\r\n                                ...state,\r\n                                email:action.email\r\n                        }\r\n        case actionTypes.SET_COMPANY_NAME:\r\n                            return{\r\n                                    ...state,\r\n                                    companyName:action.compName\r\n                            }\r\n        case actionTypes.SET_PICKUP_DATE:\r\n            return{\r\n                ...state,\r\n                pickupDate:action.pickupDate\r\n            }\r\n        case actionTypes.SET_DELIVERY_DATE:\r\n            return{\r\n                ...state,\r\n                deliveryDate:action.deliveryDate\r\n            }\r\n        case actionTypes.SET_PICKUP_SLOT:\r\n            return{\r\n                ...state,\r\n                pickupSlot:action.pickupSlot\r\n            }\r\n        case actionTypes.SET_ADDITIONAL_NOTE:\r\n            return{\r\n                ...state,\r\n                additionalNote:action.additionalNote\r\n            }\r\n        case actionTypes.SET_MEASUREABLE:\r\n                return{\r\n                    ...state,\r\n                    measureable:action.isMeasureable\r\n                }\r\n        case actionTypes.SET_TOTAL_WEIGHT:\r\n            return{\r\n                ...state,\r\n                totalWeight:action.totalWeight\r\n            }\r\n        case actionTypes.SET_DENSITY:\r\n            return{\r\n                ...state,\r\n                density:action.density\r\n            }\r\n        case actionTypes.SET_CHOSEN_PRODUCTS:\r\n            return{\r\n                ...state,\r\n                chosenProducts:action.chosenProducts\r\n            }\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\nexport default reducer;","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\reducers\\loginReducer.js",["257"],"import * as actionTypes from '../actions/actionTypes';\r\nconst initialState={\r\n    name:'',\r\n    phone:'',\r\n    email:'',\r\n    address:'',\r\n    companyName:'',\r\n    hasLogged:false,\r\n}\r\n\r\nconst reducer=(state=initialState,action)=>{\r\n    switch(action.type)\r\n    {\r\n        case actionTypes.RESET_LOGGED_STATE:\r\n            return{\r\n                initialState\r\n            }\r\n        case actionTypes.SET_LOGGED_NAME:\r\n            return {\r\n                ...state,\r\n                name:action.name\r\n            }\r\n        case actionTypes.SET_LOGGED_EMAIL:\r\n            return{\r\n                ...state,\r\n                email:action.email\r\n            }\r\n        case actionTypes.SET_LOGGED_PHONE:\r\n            return{\r\n                ...state,\r\n                phone:action.phone\r\n            }\r\n        case actionTypes.SET_LOGGED_ADDRESS:\r\n            return{\r\n                ...state,\r\n                address:action.address\r\n            }\r\n        case actionTypes.SET_LOGGED_COMPANY_NAME:\r\n            return{\r\n                 ...state,\r\n                companyName:action.compName\r\n            }\r\n        case actionTypes.SET_LOGGED_STATE:\r\n            return{\r\n                ...state,\r\n                hasLogged:action.Value\r\n            }\r\n    }\r\n\r\n    return state;\r\n};\r\n\r\nexport default reducer;","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\SignUp\\signupform.js",["258","259","260"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Home.js",["261"],"import React from 'react'\r\nimport {API} from 'aws-amplify'\r\nconst Home = () => {\r\n    return (\r\n        <div>\r\n            <h1>Dashbord Coming Sooon..</h1>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Home","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderStatus\\orderSuccess.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\Checkout.js",["262"],"import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n// import axios from 'axios';\r\nimport {Card,Button} from '@material-ui/core';\r\nimport LocationDetails from './LocationDetails';\r\nimport ProductDetails from './ProductDetails';\r\nimport OrderSummary from './OrderSummary';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router'\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../UI/Spinner';\r\nimport {Auth} from 'aws-amplify'\r\n// /serviceorder/acceptance?orderId=\"\"&providerId=\"\"\r\n\r\nimport {  API} from \"aws-amplify\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 900,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n         padding: theme.spacing(2, 4, 3),\r\n      },\r\n      formControl: {\r\n        marginTop:'1%'\r\n    }\r\n}));\r\nfunction getStepContent(step,chosenProducts,setChosenProducts) {\r\n    switch (step) {\r\n        case 0:\r\n            return <LocationDetails />;\r\n        case 1:\r\n             return <ProductDetails chosenProducts={chosenProducts} setChosenProducts={setChosenProducts } />\r\n        // case 2:\r\n        //      return <CustomerDetails/>\r\n        case 2: \r\n             return <OrderSummary/>\r\n        default:\r\n            throw new Error('Unknown step');\r\n    }\r\n}\r\n\r\nfunction SimpleCard(props) {\r\n    const classes = useStyles();\r\n    //Handle Page Change\r\n    const [activeStep, setactiveStep] = useState(0)\r\n    const [success,setSuccess]=useState(false);\r\n    const [failure,setFailure] = useState(false);\r\n    const [loading,setLoading]=useState(false);\r\n    const [chosenProducts,setChosenProducts] = useState([null])\r\n\r\n    const handleNextClick = () => {\r\n        setactiveStep(activeStep + 1);\r\n    }\r\n    const handleBackClick = () => {\r\n        setactiveStep(activeStep - 1);\r\n    }\r\n\r\n    const pinValidator = (pin) => {\r\n        var greater = 999999,smaller = 100000;\r\n        if(pin>=smaller && pin<=greater){\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const dateValidator = (dates) => {\r\n        var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    dd=parseInt(dd,10)\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    mm=parseInt(mm,10)\r\n    var yyyy = today.getFullYear();\r\n    yyyy=parseInt(yyyy,10)\r\n    //console.log(pickupDate)\r\n    var year = parseInt(dates.substring(0,4),10)\r\n    var month = parseInt(dates.substring(5,7),10)\r\n    var date = parseInt(dates.substring(8,10),10)\r\n    //console.log(year+''+month+''+date)\r\n    var invalid = 0;\r\n    if(year<yyyy || year>9999){\r\n      invalid = 1;\r\n    }\r\n    if(year===yyyy){\r\n      if(month<mm){\r\n        invalid = 1\r\n      }\r\n      else{\r\n        if(month===mm){\r\n          if(date<dd){\r\n            invalid=1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if(invalid===1){\r\n        return false\r\n    }\r\n    return true\r\n}\r\n    const handlePreOrderClick = () => {\r\n        if(pinValidator(props.pickupPin)===false){\r\n            alert('Please Enter Correct Pickup Pincode')\r\n           \r\n            return\r\n        }\r\n        if(pinValidator(props.destinationPin)===false){\r\n            alert('Please Enter Correct Destination Pincode')\r\n            \r\n            return\r\n        }\r\n        if(dateValidator(props.pickupDate)===false){\r\n            alert('Incorrect Pickup date')\r\n            \r\n            return\r\n        }\r\n        if(dateValidator(props.deliveryDate)===false){\r\n            alert('Incorrect Delivery date')\r\n            \r\n            return\r\n        }\r\n        props.setGlobalChosenProducts(chosenProducts)\r\n        setactiveStep(activeStep + 1);\r\n    }\r\n    // const handlePlaceOrderClick= async ()=>{\r\n    //     setLoading(true);\r\n    //     // const url='https://2n3n7swm8f.execute-api.ap-south-1.amazonaws.com/draft0/customerorder'\r\n    //     var currentUser = await Auth.currentUserInfo()\r\n    //     var currentUsername=currentUser.username\r\n    //     var today = new Date()\r\n    //     const data={\r\n    //         customerOrders:[\r\n    //             {   \r\n    //                 orderDate:today,\r\n    //                 toAddress:props.destinationAddress,\r\n    //                 fromAddress:props.pickupAddress,\r\n    //                 toPin:props.destinationPin,\r\n    //                 fromPin:props.pickupPin,\r\n    //                 customerEmail:currentUsername,\r\n    //                 noOfUnits:parseInt(props.noOfUnits),\r\n    //                 weightPerUnit:parseFloat(props.weightPerUnit),\r\n    //                 height:parseFloat(props.height),\r\n    //                 width:parseFloat(props.width),\r\n    //                 breadth:parseFloat(props.length),\r\n    //                 unit:props.unit,\r\n    //                 pickupdate:props.pickupDate,\r\n    //                 deliveryDate:props.deliveryDate,\r\n    //                 pickupSlot:props.pickupSlot,\r\n    //                 additionalNote:props.additionalNote\r\n    //             }]\r\n    //     }\r\n\r\n    //     // const customerEmail = \"prashantkumarsingh9423@gmail.com\"\r\n    //     const payload = {\r\n    //         body: data\r\n    //     }\r\n    //     // /serviceorder/acceptance?orderId=\"\"&providerId=\"\"\r\n    //     API\r\n    //     .post(\"GoFlexeOrderPlacement\", `/customerorder`, payload)\r\n    //     .then(response => {\r\n    //         // Add your code here\r\n    //         console.log(response);\r\n    //         setLoading(false)\r\n    //         setSuccess(true)\r\n    //         props.onresetState();\r\n    //     })\r\n    //     .catch(error => {\r\n    //         console.log(error.response);\r\n    //         setLoading(false)\r\n    //         setFailure(true)\r\n    //     });\r\n        \r\n    // }\r\n\r\n    const handlePlaceOrderClick=async ()=>{\r\n        setLoading(true);\r\n        var currentUser = await Auth.currentUserInfo();\r\n        var owner = currentUser.username;\r\n        var data;\r\n        \r\n        console.log(chosenProducts)\r\n        //var newProductIds;\r\n        /**Place New products in Inventory */\r\n        var item = chosenProducts.slice()\r\n        for(var i=0;i<item.length;i++){\r\n            if(item[i].isNew===true){\r\n                data = {\r\n                    owner: owner,\r\n                    productName: item[i].value.productName,\r\n                    productType: item[i].value.productType,\r\n                    unit: item[i].value.unit,\r\n                    height: item[i].value.height,\r\n                    width: item[i].value.width,\r\n                    length: item[i].value.length,\r\n                    weightPerUnit: item[i].value.weightPerUnit,\r\n                    location: '-',\r\n                    categories: item[i].value.categories,\r\n                    measurable:item[i].value.measurable,\r\n                    density:item[i].value.density,\r\n                    pincode:'-'\r\n                  };\r\n\r\n                  const payload = {\r\n                    body: data,\r\n                  };\r\n                  API.post(\"GoFlexeOrderPlacement\", `/inventory`, payload)\r\n                    .catch((error) => {\r\n                      console.log(error);\r\n                    });\r\n                    \r\n            }\r\n        }\r\n        \r\n        var items = []\r\n        for(var i=0;i<item.length;i++){\r\n            var temp={\r\n            productName:item[i].value.productName,\r\n            productType:item[i].value.productType,\r\n            unit:item[i].value.unit,\r\n            height:item[i].value.height,\r\n            width:item[i].value.width,\r\n            length:item[i].value.length,\r\n            weightPerUnit:item[i].value.weightPerUnit,\r\n            measurable:item[i].value.measurable,\r\n            categories:item[i].value.categories,\r\n            density:item[i].value.density,\r\n            noOfUnits:item[i].noOfUnits,\r\n            totalWeight:item[i].totalWeight\r\n            }\r\n            items.push(temp)\r\n        }\r\n\r\n        //var currentUser = await Auth.currentUserInfo()\r\n       // console.log('checking user details: '+JSON.stringify(currentUser))\r\n        //var currentUsername=currentUser.username\r\n\r\n        var today = new Date()\r\n         data={\r\n            customerOrders:[\r\n                {   \r\n                    orderDate:today,\r\n                    toAddress:props.destinationAddress,\r\n                    fromAddress:props.pickupAddress,\r\n                    toPin:props.destinationPin,\r\n                    fromPin:props.pickupPin,\r\n                    customerEmail:owner,\r\n                    pickupdate:props.pickupDate,\r\n                    deliveryDate:props.deliveryDate,\r\n                    pickupSlot:props.pickupSlot,\r\n                    additionalNote:props.additionalNote,\r\n                    items:items\r\n                }]\r\n        }\r\n        const payload = {\r\n            body: data\r\n        }\r\n        API\r\n        .post(\"GoFlexeOrderPlacement\", `/customerorder`, payload)\r\n        .then(response => {\r\n            // Add your code here\r\n            console.log(response);\r\n            setLoading(false)\r\n            setSuccess(true)\r\n            props.onresetState();\r\n        })\r\n        .catch(error => {\r\n            console.log(error.response);\r\n            setLoading(false)\r\n            setFailure(true)\r\n        });\r\n    }\r\n\r\n    \r\n\r\n    let redirect=null;\r\n    if(success===true)\r\n    {\r\n        redirect=<Redirect to=\"/orderSuccess\"></Redirect>;\r\n    }\r\n    else if(failure===true)\r\n    {\r\n        redirect=<Redirect to=\"/orderFailure\"></Redirect>;\r\n    }\r\n    let content=\r\n    <Card className={classes.root}>\r\n            {redirect}\r\n            {getStepContent(activeStep,chosenProducts,setChosenProducts)}\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'flex-end',\r\n                    margin: 20\r\n                }}\r\n            >\r\n                {activeStep !== 0 && (\r\n                    \r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    onClick={handleBackClick}\r\n                    style={{marginRight:'5px'}}\r\n                >\r\n                    Back\r\n                </Button>\r\n                )}\r\n                {activeStep < 1  && (\r\n                    \r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"primary\"\r\n                    onClick={handleNextClick}\r\n                >\r\n                    Next\r\n            </Button>\r\n                )}\r\n                {/* Button for confirm page */}\r\n                {activeStep === 1&&(\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handlePreOrderClick}\r\n                    >\r\n                        Order\r\n                    </Button>\r\n                )}\r\n                {/* Button for placing order */}\r\n                {activeStep === 2&&(\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handlePlaceOrderClick}\r\n                    >\r\n                        Confirm Order\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </Card>;\r\n\r\n        if(loading===true)\r\n        {\r\n            content=\r\n            <div class=\"jumbotron text-center\">\r\n                <h1 class=\"display-4\">Thank You!</h1>\r\n                <p class=\"lead\"><strong>For Placing  Your Order</strong> </p>\r\n                <Spinner/>\r\n            </div>\r\n        }\r\n    return (\r\n        <div>\r\n        {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        name:state.order.name,\r\n        pickupAddress:state.order.pickupAddress,\r\n        pickupPin:state.order.pickupPin,\r\n        destinationAddress:state.order.destinationAddress,\r\n        destinationPin:state.order.destinationPin,\r\n        height:state.order.height,\r\n        width:state.order.width,\r\n        length:state.order.length,\r\n        noOfUnits:state.order.noOfUnits,\r\n        weightPerUnit:state.order.weightPerUnit,\r\n        unit:state.order.unit,\r\n        phone:state.order.phone,\r\n        email:state.order.email,\r\n        companyName:state.order.companyName,\r\n        pickupDate:state.order.pickupDate,\r\n        deliveryDate:state.order.deliveryDate,\r\n        pickupSlot:state.order.pickupSlot,\r\n        additionalNote:state.order.additionalNote,\r\n        chosenProducts:state.order.chosenProducts\r\n    }\r\n}\r\nconst mapDispatchToProps=dispatch=>{\r\n    return {\r\n        onresetState:()=>dispatch(actions.resetState()),\r\n        setGlobalChosenProducts: (chosenProducts) =>\r\n      dispatch(actions.setChosenProducts(chosenProducts)),\r\n        \r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(SimpleCard);","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderStatus\\orderFailure.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Help\\Help.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\MyOrders\\MyOrders.js",["263","264","265","266","267"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetail.js",["268"],"import React, { useEffect, useState } from \"react\";\r\nimport axios from \"axios\";\r\nimport PropTypes from \"prop-types\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Tabs from \"@material-ui/core/Tabs\";\r\nimport Tab from \"@material-ui/core/Tab\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport OrderDetails from \"./OrderDetails/OrderDetails\";\r\nimport CompleteDetails from \"./OrderDetails/CompleteDetails\";\r\nimport PaymentIndex from \"./Payments/PaymentIndex\";\r\n\r\nfunction TabPanel(props) {\r\n  const { children, value, index, ...other } = props;\r\n\r\n  return (\r\n    <div\r\n      role=\"tabpanel\"\r\n      hidden={value !== index}\r\n      id={`simple-tabpanel-${index}`}\r\n      aria-labelledby={`simple-tab-${index}`}\r\n      {...other}\r\n    >\r\n      {value === index && (\r\n        <Box p={3}>\r\n          <Typography>{children}</Typography>\r\n        </Box>\r\n      )}\r\n    </div>\r\n  );\r\n}\r\n\r\nTabPanel.propTypes = {\r\n  children: PropTypes.node,\r\n  index: PropTypes.any.isRequired,\r\n  value: PropTypes.any.isRequired,\r\n};\r\n\r\nfunction a11yProps(index) {\r\n  return {\r\n    id: `simple-tab-${index}`,\r\n    \"aria-controls\": `simple-tabpanel-${index}`,\r\n  };\r\n}\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    backgroundColor: theme.palette.background.paper,\r\n  },\r\n}));\r\n\r\nfunction Details(props, id) {\r\n  const classes = useStyles();\r\n  const [value, setValue] = React.useState(0);\r\n\r\n  const handleChange = (event, newValue) => {\r\n    setValue(newValue);\r\n  };\r\n  console.log(props);\r\n  //console.log('addresss'+props.fromAddress);\r\n  return (\r\n    <div className={classes.root}>\r\n      <AppBar style={{ background: \"#1e7d3a\" }} position=\"static\">\r\n        <Tabs\r\n          value={value}\r\n          onChange={handleChange}\r\n          aria-label=\"simple tabs example\"\r\n        >\r\n          <Tab label=\"Product Details\" {...a11yProps(0)} />\r\n          <Tab label=\"Payment details\" {...a11yProps(1)} />\r\n          <Tab label=\"Tracking Details\" {...a11yProps(2)} />\r\n          <Tab label=\"Complete Details\" {...a11yProps(3)} />\r\n          <Tab label=\"Audit\" {...a11yProps(4)} />\r\n        </Tabs>\r\n      </AppBar>\r\n      <TabPanel value={value} index={0}>\r\n        <OrderDetails value={props} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={1}>\r\n        <PaymentIndex />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={2}>\r\n        Pricing\r\n      </TabPanel>\r\n      <TabPanel value={value} index={3}>\r\n        <CompleteDetails orderId={id} />\r\n      </TabPanel>\r\n      <TabPanel value={value} index={4}>\r\n        Audit\r\n      </TabPanel>\r\n    </div>\r\n  );\r\n}\r\n\r\nconst Home = (props) => {\r\n  // const [id,setId] = useState(0);\r\n  const [allDetails, setAllDetails] = useState(null);\r\n  const [paramsId, setParamsId] = useState();\r\n  useEffect(() => {\r\n    const {\r\n      match: { params },\r\n    } = props;\r\n    console.log(params.id);\r\n    setParamsId(params.id);\r\n\r\n    // setId(params.id);\r\n    const url =\r\n      \"https://t2v0d33au7.execute-api.ap-south-1.amazonaws.com/Staging01/customerorder/\" +\r\n      params.id;\r\n    //console.log(url);\r\n    axios\r\n      .get(url)\r\n      .then((resp) => {\r\n        console.log(resp.data.Item);\r\n        setAllDetails(resp.data.Item);\r\n      })\r\n      .catch((err) => {\r\n        console.log(err);\r\n      });\r\n  }, []);\r\n\r\n  return <div>{Details(allDetails, paramsId)}</div>;\r\n};\r\n\r\nexport default Home;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Profile\\MyProfile.js",["269"],"import React, { useEffect, useState } from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Accordion from '@material-ui/core/Accordion';\r\nimport AccordionDetails from '@material-ui/core/AccordionDetails';\r\nimport AccordionSummary from '@material-ui/core/AccordionSummary';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index'\r\nimport { useAppContext } from '../../libs/contextLibs'\r\nimport {\r\n    TextField,\r\n    Button\r\n  } from '@material-ui/core';\r\n  import { Auth } from 'aws-amplify';\r\n\r\n\r\n  \r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: '100%',\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    flexBasis: '33.33%',\r\n    flexShrink: 0,\r\n  },\r\n  secondaryHeading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    color: theme.palette.text.secondary,\r\n  },\r\n  textfield:{\r\n      width:'60%',\r\n  }\r\n}));\r\n\r\n const ControlledAccordions= (props) => {\r\n  const classes = useStyles();\r\n  const [expanded, setExpanded] = React.useState(false);\r\n  const { userHasAuthenticated } = useAppContext();\r\n  const [details,setDetails] = useState({\r\n      name:'guest',\r\n      email:'guest@guest.com',\r\n      contactNo:'99999',\r\n      address:'somewhere'\r\n  });\r\n  const [tempName,setTempName] = useState('');\r\n  const [tempEmail,setTempEmail] = useState('');\r\n  const [tempContactNo,setTempContactNo] = useState('');\r\n  const [tempAddress,setTempAddress] = useState('');\r\n  const [valChanged,setValChanged] = useState(false);\r\n  useEffect( ()=>{\r\n    Auth.currentUserInfo()\r\n     .then((user) => {\r\n       if(user===null || user===undefined)\r\n       return\r\n       console.log(user)\r\n       var tempEmail = user.attributes.email === undefined ? details.email : user.attributes.email\r\n       var tempPhone =  user.attributes.phone_number === undefined ? details.contactNo : user.attributes.phone_number\r\n       var tempName =  user.attributes.name === undefined ? details.name : user.attributes.name\r\n       setDetails({...details,email:tempEmail,contactNo:tempPhone,name:tempName})\r\n       \r\n      \r\n     })\r\n     .catch()\r\n },[])\r\n  async function signOut() {\r\n    try {\r\n        await Auth.signOut({ global: true });\r\n        userHasAuthenticated(false)\r\n        \r\n        \r\n    } catch (error) {\r\n        console.log('error signing out: ', error);\r\n    }\r\n}\r\n  \r\n  const handleChange = (panel) => (event, isExpanded) => {\r\n    setExpanded(isExpanded ? panel : false);\r\n  };\r\n  const onNameSubmitController=()=>{\r\n      if(tempName!==''){\r\n        setDetails({...details,name:tempName});\r\n        setValChanged(true);\r\n      }\r\n    setExpanded(false)\r\n  }\r\n  const onNameChangeController=(event)=>{\r\n    var nameOfCustomer=event.target.value;\r\n    setTempName(nameOfCustomer);\r\n  }\r\n  const onEmailSubmitController=()=>{\r\n    setDetails({...details,email:tempEmail});\r\n    setExpanded(false)\r\n    setValChanged(true);\r\n  }\r\n  const onEmailChangeController=(event)=>{\r\n    var emailOfCustomer=event.target.value;\r\n    setTempEmail(emailOfCustomer);\r\n  }\r\n  const onContactNoSubmitController=()=>{\r\n    setDetails({...details,contactNo:tempContactNo});\r\n    setExpanded(false)\r\n    setValChanged(true);\r\n  }\r\n  const onContactNoChangeController=(event)=>{\r\n    var contactNoOfCustomer=event.target.value;\r\n    setTempContactNo(contactNoOfCustomer);\r\n  }\r\n  const onAddressSubmitController=()=>{\r\n    setDetails({...details,address:tempAddress});\r\n    setExpanded(false)\r\n    setValChanged(true);\r\n  }\r\n  const onAddressChangeController=(event)=>{\r\n    var addressOfCustomer=event.target.value;\r\n    setTempAddress(addressOfCustomer);\r\n  }\r\n  \r\n\r\n  return (\r\n    <div className={classes.root}>\r\n      <Accordion expanded={expanded === 'panel1'} onChange={handleChange('panel1')}>\r\n        <AccordionSummary\r\n          expandIcon={<EditIcon />}\r\n          aria-controls=\"panel1bh-content\"\r\n          id=\"panel1bh-header\"\r\n        >\r\n          <Typography className={classes.heading}>Name</Typography>\r\n          <Typography className={classes.secondaryHeading}>{details.name}</Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n        \r\n                    <TextField\r\n                    className={classes.textfield}\r\n                    xs={12} sm={6}\r\n                    value={props.name}\r\n                    autoComplete=\"given-name\"\r\n                    onChange={(event)=>onNameChangeController(event)}\r\n                    />\r\n                    <Button onClick={onNameSubmitController} color=\"secondary\">Change</Button>\r\n       \r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion expanded={expanded === 'panel2'} onChange={handleChange('panel2')}>\r\n        <AccordionSummary\r\n          expandIcon={<EditIcon />}\r\n          aria-controls=\"panel2bh-content\"\r\n          id=\"panel2bh-header\"\r\n        >\r\n          <Typography className={classes.heading}>Email</Typography>\r\n          <Typography className={classes.secondaryHeading}>\r\n            {details.email}\r\n          </Typography>\r\n        </AccordionSummary>\r\n            <AccordionDetails>\r\n            <TextField\r\n            className={classes.textfield}\r\n            xs={12} sm={6}\r\n            value={props.name}\r\n            autoComplete=\"given-name\"\r\n            onChange={(event)=>onEmailChangeController(event)}\r\n            />\r\n            <Button onClick={onEmailSubmitController} color=\"secondary\">Change</Button>\r\n            </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion expanded={expanded === 'panel3'} onChange={handleChange('panel3')}>\r\n        <AccordionSummary\r\n          expandIcon={<EditIcon />}\r\n          aria-controls=\"panel3bh-content\"\r\n          id=\"panel3bh-header\"\r\n        >\r\n          <Typography className={classes.heading}>Contact No</Typography>\r\n          <Typography className={classes.secondaryHeading}>\r\n            {details.contactNo}\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n            <TextField\r\n            className={classes.textfield}\r\n            xs={12} sm={6}\r\n            value={props.name}\r\n            autoComplete=\"given-name\"\r\n            onChange={(event)=>onContactNoChangeController(event)}\r\n            />\r\n            <Button onClick={onContactNoSubmitController} color=\"secondary\">Change</Button>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion expanded={expanded === 'panel4'} onChange={handleChange('panel4')}>\r\n        <AccordionSummary\r\n          expandIcon={<EditIcon />}\r\n          aria-controls=\"panel4bh-content\"\r\n          id=\"panel4bh-header\"\r\n        >\r\n          <Typography className={classes.heading}>Address</Typography>\r\n          <Typography className={classes.secondaryHeading}>\r\n            {details.address}\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n            <TextField\r\n            className={classes.textfield}\r\n            xs={12} sm={6}\r\n            value={props.name}\r\n            autoComplete=\"given-name\"\r\n            onChange={(event)=>onAddressChangeController(event)}\r\n            />\r\n            <Button onClick={onAddressSubmitController} color=\"secondary\">Change</Button>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      {valChanged && \r\n        <Button\r\n         style={{float:'right',marginTop:'10px'}} color='secondary'\r\n         variant='contained'\r\n         >\r\n             Change my Details\r\n        </Button>\r\n      }\r\n      <Button\r\n      onClick={signOut}\r\n         style={{marginTop:'10px'}} color='default'\r\n         variant='contained'\r\n         >\r\n             Logout\r\n        </Button>\r\n        <Button\r\n         style={{marginTop:'10px',marginLeft:'10px',backgroundColor:'#FF8C00'}} \r\n         variant='contained'\r\n         >\r\n             Change Password\r\n        </Button>\r\n    </div>\r\n  );\r\n}\r\nconst mapStateToProps=state=>{\r\n  return{\r\n      hasLogged:state.login.hasLogged\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n  return {\r\n      setLogged:(Val)=>dispatch(actions.setLoggedState(Val)),\r\n  };\r\n}\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ControlledAccordions);","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\AddUser.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Navigation.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\Inventory.js",["270","271","272","273","274"],"\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nimport React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Link} from 'react-router-dom'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport {\r\n    Button,\r\n    Divider,\r\n  } from '@material-ui/core'\r\nimport AddProductForm from './AddProductForm';\r\nimport ShowProducts from './ShowProducts';\r\nimport \"../../Globalcss/globalcss.css\"\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    // title: {\r\n    //     fontSize: 20,\r\n    //     height: 50,\r\n    //     padding: 10,\r\n    //     paddingLeft: 55,\r\n    //     borderBottomStyle:'solid',\r\n    // borderWidth:\"1px\",\r\n    // },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    },\r\n    container :{\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'column',\r\n        display: 'flex'\r\n    },\r\n    btnHolder: {\r\n        justifyContent: 'flex-end',\r\n        display: 'flex',\r\n        marginRight:'30px',\r\n        marginBottom:'30px'\r\n      }\r\n});\r\n\r\nconst InventoryManager = (props) => {\r\n    const classes = useStyles();  \r\n    const [showForm,setShowForm] = useState(false)\r\n    const [editForm,setEditForm] = useState(false)\r\n    const toggleForm = () => {\r\n        setShowForm(!showForm)\r\n    }\r\n    const editButtonClicked = () => {\r\n        setEditForm(!editForm)\r\n        // alert(rows[checkedBoxes[0]].productId)\r\n    }\r\n    return (\r\n        <div>\r\n            <div style={{overflow:'hidden'}}>\r\n           {!editForm && <Button \r\n             onClick={toggleForm}\r\n            className=\"row AllButtons\"\r\n                variant='contained' style={{ marginBottom:'10px',float:'right'}}\r\n            >{showForm===true?'My Products':'Add new Product'}</Button>}\r\n            </div>\r\n            \r\n            {!showForm && !editForm && <Typography fullWidth className=\"TypographyTitle\" gutterBottom >\r\n                       Your Added Products              \r\n            </Typography> }\r\n             <div style={{marginTop:'30px'}}></div>\r\n             {showForm && \r\n                <AddProductForm toggleForm={toggleForm} />\r\n             }\r\n            \r\n            {!showForm && <ShowProducts editButtonClicked={editButtonClicked} /> }\r\n            <div style={{marginTop:'60px'}}></div>\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\n\r\nexport default InventoryManager;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\userManager.js",["275","276"],"import React, { useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\n\r\nimport {Link} from 'react-router-dom'\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport DeleteIcon from '@material-ui/icons/Delete';\r\nimport \"../../Globalcss/globalcss.css\"\r\nimport {\r\n    Button,\r\n    Divider\r\n  } from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    },\r\n    container :{\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'column',\r\n        display: 'flex'\r\n    },\r\n    btnHolder: {\r\n        justifyContent: 'flex-end',\r\n        display: 'flex',\r\n        marginRight:'30px',\r\n        marginBottom:'30px'\r\n      }\r\n});\r\n\r\nconst UserManager = (props) => {\r\n    const [users,setUsers] = useState([\r\n        {\r\n            name:'person1',\r\n            email: 'person1@gmail',\r\n            phone: '99991',\r\n            designation:'Admin',\r\n            department:'dept1',\r\n            role:'role1',\r\n            accesses:['read','edit','write'],\r\n            addedDate:'21-12-20'\r\n        },\r\n        {\r\n            name:'person2',\r\n            email: 'person2@gmail',\r\n            phone: '99992',\r\n            designation:'Executive',\r\n            department:'dept2',\r\n            role:'role2',\r\n            accesses:['read','edit'],\r\n            addedDate:'22-12-20'\r\n        },\r\n        {\r\n            name:'person3',\r\n            email: 'person3@gmail',\r\n            phone: '99993',\r\n            designation:'Auditor',\r\n            department:'dept3',\r\n            role:'role3',\r\n            accesses:['read','edit','write'],\r\n            addedDate:'23-12-20'\r\n        },\r\n        {\r\n            name:'person4',\r\n            email: 'person4@gmail',\r\n            phone: '99994',\r\n            designation:'Manager',\r\n            department:'dept4',\r\n            role:'role4',\r\n            accesses:['read','edit','write'],\r\n            addedDate:'23-12-20'\r\n        },\r\n    ]);\r\n    \r\n    const eachUser = (user,idx) => {\r\n        return(\r\n            <div className=\"row\" style={{marginTop:'15px', fontSize:'19px'}}>\r\n                <div className=\"col col-xs-6 col-sm-3\">\r\n                    {user.name}\r\n                </div>\r\n                <div className=\"col col-xs-6 col-sm-3\">\r\n                    {user.email}\r\n                </div>\r\n                <div className=\"col col-xs-6 col-sm-2\">\r\n                    {user.role}\r\n                </div>\r\n                <div className=\"col col-xs-6 col-sm-2\">\r\n                <Link\r\n                    to={`editUser/${user.userId}`}\r\n                ><EditIcon />Edit</Link>\r\n                </div>\r\n                <div className=\"col col-xs-6 col-sm-2\">\r\n                <Link><DeleteIcon />Delete</Link>\r\n                </div>\r\n                \r\n            </div>\r\n        );\r\n    }\r\n\r\n\r\n     \r\n    return (\r\n        <div>\r\n            <Button \r\n             component={Link}\r\n             to='/addUser'\r\n            className=\"row AllButtons\"\r\n                variant='contained' style={{ marginBottom:'10px'}}\r\n            >Add New User</Button>\r\n            <Button \r\n             component={Link}\r\n             to='/modifyRoleAccesses'\r\n            className=\"row AllButtons\"\r\n                variant='contained' style={{ marginBottom:'10px',float:'right'}}\r\n            >Modify Role Accesses</Button>\r\n            <Divider />\r\n             <div style={{marginTop:'30px'}}></div>\r\n            {users.map((user,idx) => eachUser(user,idx))}\r\n            <div style={{marginTop:'60px'}}></div>\r\n        </div>\r\n       \r\n    )\r\n}\r\n\r\n\r\nexport default UserManager;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\libs\\contextLibs.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\EditUser.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UI\\Spinner.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\ModifyRoleAccess.js",["277"],"import React from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport FormControlLabel from '@material-ui/core/FormControlLabel';\r\nimport Checkbox from '@material-ui/core/Checkbox';\r\n\r\nimport { Breadcrumbs,Card,CardContent, Divider,Button } from '@material-ui/core';\r\nimport {Link} from 'react-router-dom';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\n\r\n\r\n\r\nconst useStyles = makeStyles({\r\n    root: {\r\n       minWidth: 275,\r\n    },\r\n    // title: {\r\n    //   fontSize: 20,\r\n    //   height: 50,\r\n    //   padding: 10,\r\n    //   paddingLeft: 55,\r\n    //   color: 'white'\r\n    // },\r\n    formHeadings: {\r\n      margin: 20,\r\n      marginBottom: 0\r\n    }\r\n  });\r\n\r\nexport default function CheckboxLabels() {\r\n    const classes = useStyles()\r\n  const [state, setState] = React.useState({\r\n    \r\n  });\r\n\r\n  const handleChange = (event) => {\r\n      \r\n    setState({ ...state, [event.target.name]: event.target.checked });\r\n  };\r\n\r\n    const submitClicked = () => {\r\n        alert(JSON.stringify(state))\r\n    }\r\n  const roles = [\r\n      'Admin',\r\n      'Executive',\r\n      'Finance'\r\n  ]\r\n  const features = [\r\n      'Create Orders',\r\n      'Manage Users'\r\n  ]\r\n  const eachFeature = (role,feature) => {\r\n      var stateName = '';\r\n      if(role==='Admin'){\r\n          stateName+='admin'\r\n      }\r\n      else if(role==='Executive'){\r\n          stateName+='executive'\r\n      }\r\n      else{\r\n          stateName+='finance'\r\n      }\r\n      \r\n      if(feature=='Create Orders'){\r\n          stateName+='Create'\r\n      }\r\n      else{\r\n          stateName+='Manage'\r\n      }\r\n      console.log(stateName)\r\n      return(\r\n                 <div className=\"row\" >\r\n                        <div className=\"col col-xs-6 col-3\" ></div>\r\n                            <div className=\"col col-xs-6 col-3\" ><h4>{feature}</h4></div>\r\n                            <div className=\"col col-2\">\r\n                                 <FormControlLabel\r\n                                control={\r\n                                <Checkbox\r\n                                    checked={state[`${stateName}Read`]}\r\n                                    onChange={(event)=>handleChange(event)}\r\n                                    name={`${stateName}Read`}\r\n                                    color=\"primary\"\r\n                                />\r\n                                }\r\n                                label=\"Read\"\r\n                            />\r\n                            </div>\r\n                            <div className=\"col col-2\">\r\n                                 <FormControlLabel\r\n                                control={\r\n                                <Checkbox\r\n                                    checked={state[`${stateName}Edit`]}\r\n                                    onChange={(event) => handleChange(event)}\r\n                                    name={`${stateName}Edit`}\r\n                                    color=\"primary\"\r\n                                />\r\n                                }\r\n                                label=\"Edit\"\r\n                            />\r\n                            </div>\r\n                            <div className=\"col col-1\">\r\n                                 <FormControlLabel\r\n                                control={\r\n                                <Checkbox\r\n                                    checked={state[`${stateName}Delete`]}\r\n                                    onChange={(event) => handleChange(event)}\r\n                                    name={`${stateName}Delete`}\r\n                                    color=\"primary\"\r\n                                />\r\n                                }\r\n                                label=\"Delete\"\r\n                            />\r\n                            </div>\r\n                        </div>\r\n      )\r\n  }\r\n  const eachRole = (role) => {\r\n    return (\r\n        <>\r\n        <Divider />\r\n            <div className=\"row\">\r\n                <div className=\"col col-xs-6 col-3\" style={{marginLeft:'10px',marginBottom:'10px',marginTop:'10px'}}><h3><u>{role}</u></h3></div>\r\n            </div>\r\n            {features.map((feature) => eachFeature(role,feature))}\r\n            \r\n        </>\r\n    );\r\n  }\r\n  return (\r\n    <>\r\n    <Breadcrumbs style={{marginBottom:'10px'}} aria-label=\"breadcrumb\">\r\n        <Link color=\"inherit\" to='/userManager'>\r\n            User-Manager\r\n        </Link>\r\n            <Typography color=\"textPrimary\">Modify Role Accesses</Typography>\r\n    </Breadcrumbs>\r\n    <Card className={classes.root}>\r\n                    <CardContent style={{ padding: 0 }}>\r\n                        <Typography className=\"TypographyTitle\" gutterBottom >\r\n                            Modify Role Accesses\r\n                        </Typography>\r\n                        <div className=\"row\">\r\n                            <div className=\"col col-xs-6 col-sm-3\" style={{marginLeft:'10px'}} >\r\n                              <h2>Role</h2>\r\n                            </div>\r\n                            <div className=\"col col-xs-6 col-sm-3\">\r\n                              <h2>Feature</h2>\r\n                            </div>\r\n                            <div className=\"col \" style={{alignItems:'center',alignContent:'center',textAlign:'center'}}>\r\n                              <h2>Accesses</h2>\r\n                            </div>\r\n                        </div>\r\n                        <Divider />\r\n                        <Divider />\r\n                        <Divider />\r\n                         {roles.map((role)=>eachRole(role))}\r\n                        <div style={{overflow:'hidden'}}>\r\n                            <Button variant='contained' style={{float:'right',backgroundColor:'#f9a825',marginBottom:'20px',marginRight:'20px'}} onClick={submitClicked}>Submit</Button>\r\n                        </div>\r\n                    </CardContent>\r\n    </Card>\r\n</>\r\n  );\r\n}\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\UserManager\\ShowUser.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Preference\\PreferencePage.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\actionTypes.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\ForwardedCheckout.js",["278"],"import React, {useState} from 'react';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {API,Auth} from 'aws-amplify'\r\nimport {Card,Button} from '@material-ui/core';\r\nimport LocationDetails from './LocationDetails';\r\nimport OrderSummary from './OrderSummary';\r\nimport {connect} from 'react-redux';\r\nimport {Redirect} from 'react-router'\r\nimport * as actions from '../../store/actions/index';\r\nimport Spinner from '../UI/Spinner';\r\n// /combinedView?orderId=\r\nconst useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    paper: {\r\n        position: 'absolute',\r\n        width: 900,\r\n        backgroundColor: theme.palette.background.paper,\r\n        border: '2px solid #000',\r\n        boxShadow: theme.shadows[5],\r\n         padding: theme.spacing(2, 4, 3),\r\n      },\r\n      formControl: {\r\n        marginTop:'1%'\r\n    }\r\n}));\r\nfunction getStepContent(step) {\r\n    switch (step) {\r\n        case 0:\r\n            return <LocationDetails />;\r\n        // case 1:\r\n        //      return <ProductDetails/>\r\n        // case 2:\r\n        //      return <CustomerDetails/>\r\n        case 1: \r\n             return <OrderSummary/>\r\n        default:\r\n            throw new Error('Unknown step');\r\n    }\r\n}\r\n\r\nfunction ForwardedCheckout(props) {\r\n    const classes = useStyles();\r\n    //Handle Page Change\r\n    const [activeStep, setactiveStep] = useState(0)\r\n    const [success,setSuccess]=useState(false);\r\n    const [failure,setFailure] = useState(false);\r\n    const [loading,setLoading]=useState(false);\r\n    const pinValidator = (pin) => {\r\n        var greater = 999999,smaller = 100000;\r\n        if(pin>=smaller && pin<=greater){\r\n            return true\r\n        }\r\n        return false;\r\n    }\r\n\r\n    const dateValidator = (dates) => {\r\n        var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    dd=parseInt(dd,10)\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    mm=parseInt(mm,10)\r\n    var yyyy = today.getFullYear();\r\n    yyyy=parseInt(yyyy,10)\r\n    //console.log(pickupDate)\r\n    var year = parseInt(dates.substring(0,4),10)\r\n    var month = parseInt(dates.substring(5,7),10)\r\n    var date = parseInt(dates.substring(8,10),10)\r\n    //console.log(year+''+month+''+date)\r\n    var invalid = 0;\r\n    if(year<yyyy || year>9999){\r\n      invalid = 1;\r\n    }\r\n    if(year===yyyy){\r\n      if(month<mm){\r\n        invalid = 1\r\n      }\r\n      else{\r\n        if(month===mm){\r\n          if(date<dd){\r\n            invalid=1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if(invalid===1){\r\n        return false\r\n    }\r\n    return true\r\n}\r\n    const handleNextClick = () => {\r\n        if(pinValidator(props.pickupPin)===false){\r\n            alert('Please Enter Correct Pickup Pincode')\r\n           \r\n            return\r\n        }\r\n        if(pinValidator(props.destinationPin)===false){\r\n            alert('Please Enter Correct Destination Pincode')\r\n            \r\n            return\r\n        }\r\n        if(dateValidator(props.pickupDate)===false){\r\n            alert('Incorrect Pickup date')\r\n            \r\n            return\r\n        }\r\n        if(dateValidator(props.deliveryDate)===false){\r\n            alert('Incorrect Delivery date')\r\n            \r\n            return\r\n        }\r\n        setactiveStep(activeStep + 1);\r\n    }\r\n    const handleBackClick = () => {\r\n        setactiveStep(activeStep - 1);\r\n    }\r\n\r\n    \r\n    const handlePlaceOrderClick=async ()=>{\r\n        setLoading(true);\r\n        var currentUser = await Auth.currentUserInfo();\r\n        var owner = currentUser.username;\r\n        var data;\r\n        \r\n        //console.log(props.chosenProducts)\r\n        //var newProductIds;\r\n        /**Place New products in Inventory */\r\n        var item = props.chosenProducts.slice()\r\n        for(var i=0;i<item.length;i++){\r\n            if(item[i].isNew===true){\r\n                data = {\r\n                    owner: owner,\r\n                    productName: item[i].value.productName,\r\n                    productType: item[i].value.productType,\r\n                    unit: item[i].value.unit,\r\n                    height: item[i].value.height,\r\n                    width: item[i].value.width,\r\n                    length: item[i].value.length,\r\n                    weightPerUnit: item[i].value.weightPerUnit,\r\n                    location: '-',\r\n                    categories: item[i].value.categories,\r\n                    measurable:item[i].value.measurable,\r\n                    density:item[i].value.density,\r\n                    pincode:'-'\r\n                  };\r\n\r\n                  const payload = {\r\n                    body: data,\r\n                  };\r\n                  API.post(\"GoFlexeOrderPlacement\", `/inventory`, payload)\r\n                    .catch((error) => {\r\n                      console.log(error);\r\n                    });\r\n                    \r\n            }\r\n        }\r\n        \r\n        var items=[]\r\n        for(var i=0;i<item.length;i++){\r\n            var temp={\r\n            productName:item[i].value.productName,\r\n            productType:item[i].value.productType,\r\n            unit:item[i].value.unit,\r\n            height:item[i].value.height,\r\n            width:item[i].value.width,\r\n            length:item[i].value.length,\r\n            weightPerUnit:item[i].value.weightPerUnit,\r\n            measurable:item[i].value.measurable,\r\n            categories:item[i].value.categories,\r\n            density:item[i].value.density,\r\n            noOfUnits:item[i].noOfUnits,\r\n            totalWeight:item[i].totalWeight\r\n            }\r\n            items.push(temp)\r\n        }\r\n\r\n        //var currentUser = await Auth.currentUserInfo()\r\n       // console.log('checking user details: '+JSON.stringify(currentUser))\r\n        //var currentUsername=currentUser.username\r\n\r\n        var today = new Date()\r\n         data={\r\n            customerOrders:[\r\n                {   \r\n                    orderDate:today,\r\n                    toAddress:props.destinationAddress,\r\n                    fromAddress:props.pickupAddress,\r\n                    toPin:props.destinationPin,\r\n                    fromPin:props.pickupPin,\r\n                    customerEmail:owner,\r\n                    pickupdate:props.pickupDate,\r\n                    deliveryDate:props.deliveryDate,\r\n                    pickupSlot:props.pickupSlot,\r\n                    additionalNote:props.additionalNote,\r\n                    items:items\r\n                }]\r\n        }\r\n        const payload = {\r\n            body: data\r\n        }\r\n        API\r\n        .post(\"GoFlexeOrderPlacement\", `/customerorder`, payload)\r\n        .then(response => {\r\n            // Add your code here\r\n            console.log(response);\r\n            setLoading(false)\r\n            setSuccess(true)\r\n            props.onresetState();\r\n        })\r\n        .catch(error => {\r\n            console.log(error.response);\r\n            setLoading(false)\r\n            setFailure(true)\r\n        });\r\n    }\r\n\r\n    let redirect=null;\r\n    if(success===true)\r\n    {\r\n        redirect=<Redirect to=\"/orderSuccess\"></Redirect>;\r\n    }\r\n    else if(failure===true)\r\n    {\r\n        redirect=<Redirect to=\"/orderFailure\"></Redirect>;\r\n    }\r\n    let content=\r\n    <Card className={classes.root}>\r\n            {redirect}\r\n            {getStepContent(activeStep)}\r\n            <div\r\n                style={{\r\n                    display: 'flex',\r\n                    flexDirection: 'row',\r\n                    justifyContent: 'flex-end',\r\n                    margin: 20\r\n                }}\r\n            >\r\n                {activeStep !== 0 && (\r\n                    \r\n                <Button\r\n                    variant=\"contained\"\r\n                    color=\"default\"\r\n                    onClick={handleBackClick}\r\n                    style={{marginRight:'5px'}}\r\n                >\r\n                    Back\r\n                </Button>\r\n                )}\r\n                \r\n                {/* Button for confirm page */}\r\n                {activeStep === 0&&(\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handleNextClick}\r\n                    >\r\n                        Order\r\n                    </Button>\r\n                )}\r\n                {/* Button for placing order */}\r\n                {activeStep === 1&&(\r\n                    <Button\r\n                        variant=\"contained\"\r\n                        color=\"primary\"\r\n                        onClick={handlePlaceOrderClick}\r\n                    >\r\n                        Confirm Order\r\n                    </Button>\r\n                )}\r\n            </div>\r\n        </Card>;\r\n\r\n        if(loading===true)\r\n        {\r\n            content=\r\n            <div class=\"jumbotron text-center\">\r\n                <h1 class=\"display-4\">Thank You!</h1>\r\n                <p class=\"lead\"><strong>For Placing  Your Order</strong> </p>\r\n                <Spinner/>\r\n            </div>\r\n        }\r\n    return (\r\n        <div>\r\n        {content}\r\n        </div>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        name:state.order.name,\r\n        pickupAddress:state.order.pickupAddress,\r\n        pickupPin:state.order.pickupPin,\r\n        destinationAddress:state.order.destinationAddress,\r\n        destinationPin:state.order.destinationPin,\r\n        height:state.order.height,\r\n        width:state.order.width,\r\n        length:state.order.length,\r\n        noOfUnits:state.order.noOfUnits,\r\n        weightPerUnit:state.order.weightPerUnit,\r\n        unit:state.order.unit,\r\n        phone:state.order.phone,\r\n        email:state.order.email,\r\n        companyName:state.order.companyName,\r\n        pickupDate:state.order.pickupDate,\r\n        deliveryDate:state.order.deliveryDate,\r\n        pickupSlot:state.order.pickupSlot,\r\n        additionalNote:state.order.additionalNote,\r\n        chosenProducts:state.order.chosenProducts\r\n    }\r\n}\r\nconst mapDispatchToProps=dispatch=>{\r\n    return {\r\n        onresetState:()=>dispatch(actions.resetState()),\r\n        \r\n    };\r\n}\r\n\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(ForwardedCheckout);","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\index.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\ResetPassword\\ResetPassword.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\Welcome\\welcomePage.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Auth\\Login\\loginform.js",["279"],"import React, { useState,useEffect } from \"react\";\r\nimport { Auth } from \"aws-amplify\";\r\nimport { Link } from \"react-router-dom\";\r\nimport Button from '@material-ui/core/Button';\r\nimport {Input} from '@material-ui/core';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../../store/actions/index';\r\nimport { useAppContext } from \"../../../libs/contextLibs\";\r\nconst Login = (props) =>  {\r\n    const [getOTP,setGetOTP] = useState(false);\r\n    const [otp,setOTP] = useState();\r\n    const [resend,setResend] = useState(false);\r\n    const [timeLeft,setTimeLeft] = useState(0);\r\n    const [email,setEmail] = useState();\r\n    const [password,setPassword] = useState();\r\n    const [session,setSession] = useState();\r\n    const { userHasAuthenticated } = useAppContext();\r\n\r\n    const handleOTPChange = (event) => {\r\n        setOTP(event.target.value)\r\n    }\r\n    const onEmailChangeController = (event) => {\r\n        setEmail(event.target.value);\r\n    }\r\n    const onPasswordChangeController = (event) => {\r\n        setPassword(event.target.value);\r\n    }\r\n\r\n    useEffect(() => {\r\n        if (!timeLeft){\r\n            setResend(true);\r\n            return;\r\n        }\r\n        const intervalId = setInterval(() => {\r\n          setTimeLeft(timeLeft - 1);\r\n        }, 1000);\r\n        return () => clearInterval(intervalId);\r\n      }, [timeLeft]);\r\n\r\n\r\n    const submitLogin = async () => {\r\n        try {\r\n            await Auth.signIn(email, password);\r\n            //alert(\"Logged in\");\r\n            userHasAuthenticated(true)\r\n            // props.setLogged(true)\r\n          } catch (e) {\r\n            alert(e.message);\r\n          }\r\n          \r\n    }\r\n    const handleGetOTP = () => {\r\n        if(email===''){\r\n            alert('Please enter valid phone number')\r\n            return\r\n        }\r\n        setGetOTP(true);\r\n        setTimeLeft(30);\r\n        setResend(false)\r\n\r\n        Auth.signIn(email)\r\n        .then((result) => {\r\n        setSession(result); // Note that this is a new variable\r\n        })\r\n        .catch((e) => {\r\n        if (e.code === 'UserNotFoundException') {\r\n            alert('User Not Found')\r\n        } else if (e.code === 'UsernameExistsException') {\r\n            handleGetOTP()\r\n        } else {\r\n            console.log(e.code);\r\n            console.error(e);\r\n        }\r\n        });\r\n    }\r\n\r\n\r\n     const submitOTPLogin = () => {\r\n        Auth.sendCustomChallengeAnswer(session, otp)\r\n        .then((user) => {\r\n         // this is THE cognito user \r\n         userHasAuthenticated(true)\r\n        setSession(null);\r\n        })\r\n        .catch((err) => {\r\n        setOTP('');\r\n        console.log(err);\r\n        });\r\n      }\r\n\r\n\r\n\r\n\r\n        return (\r\n                <React.Fragment>\r\n                <header className=\"header\">\r\n                <nav className=\"navbar navbar-expand-lg navbar-light py-3\">\r\n                <div className=\"container\">\r\n\r\n                {/* <a href=\"#\" className=\"navbar-brand\">\r\n                    <img src=\"https://res.cloudinary.com/mhmd/image/upload/v1571398888/Group_1514_tjekh3_zkts1c.svg\" alt=\"logo\" width=\"150\" />\r\n                </a> */}\r\n                <a href=\"#\" className=\"navbar-brand\">\r\n                    GoFlexe\r\n                </a>\r\n                </div>\r\n                </nav>\r\n                </header>\r\n\r\n\r\n                <div className=\"container\">\r\n                    <div className=\"row py-5 mt-4 align-items-center\">\r\n\r\n                <div className=\"col-md-5 pr-lg-5 mb-5 mb-md-0\">\r\n                <img src=\"https://res.cloudinary.com/mhmd/image/upload/v1569543678/form_d9sh6m.svg\" alt=\"\" className=\"img-fluid mb-3 d-none d-md-block\" />\r\n                <h1>Login to your Account</h1>\r\n                \r\n                </div>\r\n\r\n\r\n                <div className=\"col-md-7 col-lg-6 ml-auto\">\r\n                <form>\r\n                <h3>Sign In</h3>\r\n\r\n                <div className=\"form-group\">\r\n                    <Input value={email} onChange={(event) => onEmailChangeController(event)} disableUnderline='true' type=\"email\" className=\"form-control\" placeholder=\"Enter email or phone\"  />\r\n                </div>\r\n                \r\n               {!getOTP && <div className=\"form-group\">\r\n                    <Input value={password} onChange={(event) => onPasswordChangeController(event)} disableUnderline='true' type=\"password\" className=\"form-control\" placeholder=\"Enter password\" />\r\n                    {/* <input type=\"password\" className=\"form-control\" placeholder=\"Enter password\" /> */}\r\n                </div>}\r\n\r\n                <div className=\"row\">\r\n\r\n                    {!getOTP && <Button onClick={handleGetOTP}\r\n                    className=\"col col-sm-3 ml-3\" variant='contained' \r\n                    style={{marginBottom:'20px' }} color='primary' >Login by OTP</Button>\r\n                    }\r\n                    { getOTP && resend &&\r\n                        <Button onClick={handleGetOTP}\r\n                        className=\"col col-sm-3 ml-3\" variant='contained' \r\n                        style={{marginBottom:'20px' }} color='primary' >Resend</Button>\r\n                    }\r\n                    {\r\n                        getOTP && !resend &&\r\n                        <Button onClick={handleGetOTP}\r\n                        disabled='true'\r\n                        className=\"col col-sm-3 ml-3\" variant='contained' \r\n                        style={{marginBottom:'20px', fontSize:'12px' }} color='default' >Resend in 00:{timeLeft}</Button>\r\n                    }\r\n                    { getOTP && \r\n                        <div className=\"form-group col col-sm\">\r\n                        <Input \r\n                        value={otp} disableUnderline='true' type=\"tel\" \r\n                        onChange={handleOTPChange} className=\"form-control\" \r\n                        placeholder=\"Enter OTP\"  />\r\n                        </div>\r\n                    }\r\n                    \r\n                </div>\r\n               \r\n\r\n                <div className=\"form-group\">\r\n                    <div className=\"custom-control custom-checkbox\">\r\n                        <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\r\n                        <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember me</label>\r\n                    </div>\r\n                </div>\r\n                {getOTP && <Button  onClick={submitOTPLogin} variant='contained' color='primary' className=\"btn btn-primary btn-block\" >Submit</Button>}\r\n                {!getOTP && <Button  onClick={submitLogin} variant='contained' color='primary' className=\"btn btn-primary btn-block\" >Submit</Button>}\r\n                {/* <button onClick={submitLogin} type=\"submit\" className=\"btn btn-primary btn-block\">Submit</button> */}\r\n                <p className=\"forgot-password text-right\">\r\n                     <Link to='/resetPassword'>Forgot Password?</Link>\r\n                </p>\r\n                <Link to='/signup' style={{float:'right'}} className=\"forgot-password text-right\">\r\n                    Sign up\r\n                </Link>\r\n                \r\n                \r\n            </form>\r\n</div>\r\n</div>\r\n</div>\r\n\r\n\r\n</React.Fragment>\r\n        );\r\n    }\r\n\r\n\r\n    const mapStateToProps=state=>{\r\n        return{\r\n            hasLogged:state.login.hasLogged\r\n        }\r\n    }\r\n    \r\n    const mapDispatchToProps=dispatch=>{\r\n        return {\r\n            setLogged:(Val)=>dispatch(actions.setLoggedState(Val)),\r\n        };\r\n    }\r\n    \r\nexport default connect(mapStateToProps,mapDispatchToProps)(Login);\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\order.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\OrderSummary.js",["280"],"import React, { useState , useEffect} from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport constants from '../../Constants/constants';\r\nimport {API} from 'aws-amplify';\r\nimport EditIcon from '@material-ui/icons/Edit';\r\nimport PaymentIndex from '../Payments/PaymentIndex'\r\n\r\nimport {\r\n    Card,\r\n    TextField,\r\n    Button,\r\n    Grid,\r\n  } from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    }\r\n});\r\n\r\nconst OrderSummary = (props) => {\r\n    const classes = useStyles();    \r\n    const [editName,setEditName] = useState(false);\r\n    const [newName,setNewName] = useState('');\r\n    const [editEmail,setEditEmail] = useState(false);\r\n    const [newEmail,setNewEmail] = useState('');\r\n    const [editContact,setEditContact] = useState(false);\r\n    const [newContact,setNewContact] = useState('');\r\n    const [editCompany,setEditCompany] = useState(false);\r\n    const [newCompany,setNewCompany] = useState('');\r\n    const [estimatedMoney,setEstimatedMoney] = useState(-1);\r\n    useEffect(() => {\r\n       // var params =`height=${props.height}&width=${props.width}&length=${props.length}&toPin=${props.destinationPin}&fromPin=${props.pickupPin}&measureable=true`\r\n       \r\n       var items=[]\r\n    \r\n    \r\n       for(var i=0;i<props.chosenProducts.length;i++){\r\n         //var temp=''\r\n         items.push({\r\n           toPin:props.pickupPin,\r\n             fromPin:props.destinationPin,\r\n             // productName:props.chosenProducts[i].value.productName,\r\n             // productType:props.chosenProducts[i].value.productType,\r\n             length:props.chosenProducts[i].value.length,\r\n             width:props.chosenProducts[i].value.width,\r\n             height:props.chosenProducts[i].value.height,\r\n             weightPerUnit:props.chosenProducts[i].value.weightPerUnit,\r\n             noOfUnits:props.chosenProducts[i].noOfUnits,\r\n             measurable:props.chosenProducts[i].value.measurable,\r\n             density:props.chosenProducts[i].value.density,\r\n             totalWeight:props.chosenProducts[i].totalWeight,\r\n             \r\n         })\r\n       }\r\n   \r\n   \r\n       // const payload = {\r\n       //   body:{\r\n       //     items:items\r\n       //   }\r\n       // }\r\n       var params = JSON.stringify(items)\r\n       API\r\n       .get(\"GoFlexeOrderPlacement\", `/pricing?items=`+params)\r\n        .then(resp=>{\r\n            \r\n            setEstimatedMoney(resp.estimatedPrice);\r\n            \r\n        })\r\n        .catch(err=>{\r\n            setEstimatedMoney(\"Error: Try Later\")\r\n            console.log(err);\r\n        })\r\n    \r\n      },[]);\r\n      //name change\r\n     const onNameChangeController = (event) =>{\r\n        var temp=event.target.value;\r\n        setNewName(temp);\r\n     }\r\n      const editNameClicked = () => {\r\n          setEditName(true);\r\n      }\r\n      const onNameSubmitController = () => {\r\n        props.setName(newName);\r\n        setEditName(false);\r\n      }\r\n\r\n      //email change\r\n      const onEmailChangeController = (event) =>{\r\n        var temp=event.target.value;\r\n        setNewEmail(temp);\r\n     }\r\n      const editEmailClicked = () => {\r\n          setEditEmail(true);\r\n      }\r\n      const onEmailSubmitController = () => {\r\n        props.setEmail(newEmail);\r\n        setEditEmail(false);\r\n      }\r\n\r\n      //contact change\r\n      const onContactChangeController = (event) =>{\r\n        var temp=event.target.value;\r\n        setNewContact(temp);\r\n     }\r\n      const editContactClicked = () => {\r\n          setEditContact(true);\r\n      }\r\n      const onContactSubmitController = () => {\r\n        props.setPhone(newContact);\r\n        setEditContact(false);\r\n      }\r\n      //company name\r\n      const onCompanyChangeController = (event) =>{\r\n        var temp=event.target.value;\r\n        setNewCompany(temp);\r\n     }\r\n      const editCompanyClicked = () => {\r\n          setEditCompany(true);\r\n      }\r\n      const onCompanySubmitController = () => {\r\n        props.setCompany(newCompany);\r\n        setEditCompany(false);\r\n      }\r\n    return (\r\n      <Card className={classes.paper}>\r\n        <CardContent style={{ padding: 0, marginTop: 10 }}>\r\n          <Typography className=\"TypographyTitle\" gutterBottom>\r\n            Order Summary\r\n            <tr style={{ float: \"right\", marginRight: \"10%\" }}>\r\n              {/* <th scope=\"row\">{constants.estimatedCost+\": \"}</th> */}\r\n              <td>{constants.estimatedCost + \": \"}</td>\r\n              <td>Rs {estimatedMoney}</td>\r\n            </tr>\r\n          </Typography>\r\n          <table>\r\n            <Grid\r\n              container\r\n              spacing={3}\r\n              style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n            >\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">Order Date :</th>\r\n                  <td>{new Date().toLocaleDateString()}</td>\r\n                </tr>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.pickupAddress + \": \"}</th>\r\n                  <td>\r\n                    {props.pickupAddress}-{props.pickupPin}\r\n                  </td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.destinationAddress + \": \"}</th>\r\n                  <td>\r\n                    {props.destinationAddress}-{props.destinationPin}\r\n                  </td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.noOfUnits + \": \"}</th>\r\n                  <td>{props.noOfUnits}</td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.weightPerUnit + \": \"}</th>\r\n                  <td>{props.weightPerUnit}</td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.DimensionPerUnit + \": \"}</th>\r\n                  <td>\r\n                    {props.height}x{props.length}x{props.width + \" \"}\r\n                    {props.unit}{\" \"}\r\n                  </td>\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.customerName + \": \"}</th>\r\n                  {editName && (\r\n                    <td>\r\n                      <TextField\r\n                        className={classes.textfield}\r\n                        xs={12}\r\n                        sm={6}\r\n                        value={newName}\r\n                        autoComplete=\"given-name\"\r\n                        onChange={(event) => onNameChangeController(event)}\r\n                      />\r\n                      <Button\r\n                        onClick={onNameSubmitController}\r\n                        color=\"secondary\"\r\n                      >\r\n                        Change\r\n                      </Button>\r\n                    </td>\r\n                  )}\r\n                  {!editName && (\r\n                    <td>\r\n                      {props.name} <EditIcon onClick={editNameClicked} />\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.customerEmail + \": \"}</th>\r\n                  {editEmail && (\r\n                    <td>\r\n                      <TextField\r\n                        className={classes.textfield}\r\n                        xs={12}\r\n                        sm={6}\r\n                        value={newEmail}\r\n                        autoComplete=\"given-name\"\r\n                        onChange={(event) => onEmailChangeController(event)}\r\n                      />\r\n                      <Button\r\n                        onClick={onEmailSubmitController}\r\n                        color=\"secondary\"\r\n                      >\r\n                        Change\r\n                      </Button>\r\n                    </td>\r\n                  )}\r\n                  {!editEmail && (\r\n                    <td>\r\n                      {props.email} <EditIcon onClick={editEmailClicked} />\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              </Grid>\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.customerPhoneNumber + \": \"}</th>\r\n                  {editContact && (\r\n                    <td>\r\n                      <TextField\r\n                        className={classes.textfield}\r\n                        xs={12}\r\n                        sm={6}\r\n                        value={newContact}\r\n                        autoComplete=\"given-name\"\r\n                        onChange={(event) => onContactChangeController(event)}\r\n                      />\r\n                      <Button\r\n                        onClick={onContactSubmitController}\r\n                        color=\"secondary\"\r\n                      >\r\n                        Change\r\n                      </Button>\r\n                    </td>\r\n                  )}\r\n                  {!editContact && (\r\n                    <td>\r\n                      {props.phone} <EditIcon onClick={editContactClicked} />\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              </Grid>\r\n\r\n              <Grid item xs={12} sm={6}>\r\n                <tr>\r\n                  <th scope=\"row\">{constants.companyName + \": \"}</th>\r\n                  {editCompany && (\r\n                    <td>\r\n                      <TextField\r\n                        className={classes.textfield}\r\n                        xs={12}\r\n                        sm={6}\r\n                        value={newCompany}\r\n                        autoComplete=\"given-name\"\r\n                        onChange={(event) => onCompanyChangeController(event)}\r\n                      />\r\n                      <Button\r\n                        onClick={onCompanySubmitController}\r\n                        color=\"secondary\"\r\n                      >\r\n                        Change\r\n                      </Button>\r\n                    </td>\r\n                  )}\r\n                  {!editCompany && (\r\n                    <td>\r\n                      {props.companyName}{\" \"}\r\n                      <EditIcon onClick={editCompanyClicked} />\r\n                    </td>\r\n                  )}\r\n                </tr>\r\n              </Grid>\r\n            </Grid>\r\n          </table>\r\n        </CardContent>\r\n        <PaymentIndex />\r\n      </Card>\r\n    );\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n    return{\r\n        name:state.order.name,\r\n        pickupAddress:state.order.pickupAddress,\r\n        pickupPin:state.order.pickupPin,\r\n        destinationAddress:state.order.destinationAddress,\r\n        destinationPin:state.order.destinationPin,\r\n        height:state.order.height,\r\n        width:state.order.width,\r\n        length:state.order.length,\r\n        noOfUnits:state.order.noOfUnits,\r\n        weightPerUnit:state.order.weightPerUnit,\r\n        unit:state.order.unit,\r\n        phone:state.order.phone,\r\n        email:state.order.email,\r\n        companyName:state.order.companyName,\r\n        measureable:state.order.measureable,\r\n        totalWeight:state.order.totalWeight,\r\n        density:state.order.density,\r\n        chosenProducts:state.order.chosenProducts\r\n    }\r\n}\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n    return {\r\n        setName:(name)=>dispatch(actions.setCustomerName(name)),\r\n        setEmail:(email)=>dispatch(actions.setEmail(email)),\r\n        setPhone:(phone)=>dispatch(actions.setPhoneNumber(phone)),\r\n        setCompany:(compName)=>dispatch(actions.setCompanyName(compName))\r\n    };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(OrderSummary);\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\LocationDetails.js",["281"],"import React, { useEffect, useState } from 'react'\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport {connect} from 'react-redux';\r\nimport * as actions from '../../store/actions/index';\r\nimport constants from '../../Constants/constants'\r\nimport {\r\n  TextField,\r\n  Grid, FormControl,\r\n  InputLabel,\r\n  Select,\r\n  TextareaAutosize\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // minWidth: 275,\r\n  },\r\n  // title: {\r\n  //   fontSize: 20,\r\n  //   height: 50,\r\n  //   padding: 10,\r\n  //   paddingLeft: 55,\r\n  //   color: 'white'\r\n  // },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0\r\n  }\r\n});\r\n\r\nconst BuyerDetails = (props) => {\r\n  \r\n  const classes = useStyles();\r\n  const [pickupZipValidator,setPickupZipValidator] = useState('');\r\n  const [deliverZipValidator,setDeliverZipValidator] = useState('');\r\n  const [pickupDateValidator,setPickupDateValidator] = useState('');\r\n  const [deliveryDateValidator,setDeliveryDateValidator] = useState('')\r\n\r\n  useEffect(()=>{\r\n    //alert('topin'+props.pickupPin+'from pin'+props.destinationPin)\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    var yyyy = today.getFullYear();\r\n\r\n    today =yyyy +'-'+mm+'-'+dd ;\r\n\r\n    props.setPickupDateDispatcher(today)\r\n    props.setDeliveryDateDispatcher(today)\r\n    //console.log(props.chosenProducts)\r\n  },[])\r\n  const onPickupChangeController=(event)=>{\r\n      var pickupAddress=event.target.value;\r\n      props.setPickupAddressDispatcher(pickupAddress)\r\n  }\r\n  const onPickupDateChangeController=(event)=>{\r\n    var pickupDate=event.target.value;\r\n    var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    dd=parseInt(dd,10)\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    mm=parseInt(mm,10)\r\n    var yyyy = today.getFullYear();\r\n    yyyy=parseInt(yyyy,10)\r\n    //console.log(pickupDate)\r\n    var year = parseInt(pickupDate.substring(0,4),10)\r\n    var month = parseInt(pickupDate.substring(5,7),10)\r\n    var date = parseInt(pickupDate.substring(8,10),10)\r\n    //console.log(year+''+month+''+date)\r\n    var invalid = 0;\r\n    if(year<yyyy || year>9999){\r\n      invalid = 1;\r\n    }\r\n    if(year===yyyy){\r\n      if(month<mm){\r\n        invalid = 1\r\n      }\r\n      else{\r\n        if(month===mm){\r\n          if(date<dd){\r\n            invalid=1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if(invalid===1)\r\n      setPickupDateValidator('Invalid Date')\r\n    else\r\n      setPickupDateValidator('')\r\n    props.setPickupDateDispatcher(pickupDate)\r\n    \r\n}\r\n\r\nconst onDeliveryDateChangeController = (event) => {\r\n  var deliverDate=event.target.value;\r\n  var today = new Date();\r\n    var dd = String(today.getDate()).padStart(2, '0');\r\n    dd=parseInt(dd,10)\r\n    var mm = String(today.getMonth() + 1).padStart(2, '0'); //January is 0!\r\n    mm=parseInt(mm,10)\r\n    var yyyy = today.getFullYear();\r\n    yyyy=parseInt(yyyy,10)\r\n    //console.log(pickupDate)\r\n    var year = parseInt(deliverDate.substring(0,4),10)\r\n    var month = parseInt(deliverDate.substring(5,7),10)\r\n    var date = parseInt(deliverDate.substring(8,10),10)\r\n    //console.log(year+''+month+''+date)\r\n    var invalid = 0;\r\n    if(year<yyyy || year>9999){\r\n      invalid = 1;\r\n    }\r\n    if(year===yyyy){\r\n      if(month<mm){\r\n        invalid = 1\r\n      }\r\n      else{\r\n        if(month===mm){\r\n          if(date<dd){\r\n            invalid=1;\r\n          }\r\n        }\r\n      }\r\n    }\r\n    if(invalid===1)\r\n    setDeliveryDateValidator('Invalid Date')\r\n    else\r\n    setDeliveryDateValidator('')\r\n  props.setDeliveryDateDispatcher(event.target.value)\r\n}\r\n  const onPickupZipChangeController=(event)=>{\r\n      var pickupPinCode=parseInt(event.target.value,10);\r\n      if(pickupPinCode<0){\r\n        setPickupZipValidator('Cannot be a negative value')\r\n        props.setPickupPinDispatcher(pickupPinCode);\r\n        return\r\n      }\r\n      else{\r\n        setPickupZipValidator('')\r\n      }\r\n      var count=0,temp=pickupPinCode\r\n      while(temp>0){\r\n        count++;\r\n        temp=Math.floor(temp/10)\r\n      }\r\n      if(count!==6){\r\n        setPickupZipValidator('Must be of six digits')\r\n      }\r\n      else{\r\n        setPickupZipValidator('')\r\n      }\r\n      props.setPickupPinDispatcher(pickupPinCode);\r\n  }\r\n  const onDestinationZipChangeController=(event)=>{\r\n    var destinationPinCode=parseInt(event.target.value,10);\r\n    var greater = 999999,smaller = 100000;\r\n    var check = 1;\r\n    if(destinationPinCode<smaller || destinationPinCode>greater){\r\n      setDeliverZipValidator('Must be of 6 digits')\r\n      check=0\r\n    }\r\n    if(destinationPinCode<0){\r\n      setDeliverZipValidator('Cannot be negative')\r\n      check=0\r\n    }\r\n    if(check===1){\r\n      setDeliverZipValidator('')\r\n    }\r\n    props.setDestinationPinDispatcher(destinationPinCode);\r\n}\r\n  const onDestinationChangeController=(event)=>{\r\n      var destinationAddress=event.target.value;\r\n      props.setDestinationAddressDispatcher(destinationAddress);\r\n  }\r\n\r\n  \r\n  const onTimeSlotChangeController = (event) => {\r\n    props.setPickupSlotDispatcher(event.target.value)\r\n  }\r\n  const onAdditionalNoteChangeController = (event) => {\r\n    props.setAdditionalNoteDispatcher(event.target.value)\r\n  }\r\n  return (\r\n    <CardContent style={{ padding: 0 }}>\r\n      <Typography className=\"TypographyTitle\" gutterBottom >\r\n        Location Details\r\n        </Typography>\r\n      <form>\r\n        <Typography className={classes.formHeadings} >Location Preference</Typography>\r\n\r\n        <Grid container \r\n         spacing={3} style={{ paddingLeft:20, paddingTop: 20 ,paddingBottom: 30 }}\r\n        >\r\n\r\n          <Grid item xs={12} sm={5}>\r\n            <TextField\r\n              required\r\n              id=\"pickupaddress\"\r\n              name=\"pickupaddress\"\r\n              label=\"Pick up address\"\r\n              fullWidth\r\n              value={props.pickupAddress}\r\n              onChange={(event)=>onPickupChangeController(event)}\r\n              autoComplete=\"shipping address-line1\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={2}>\r\n          <TextField\r\n              required\r\n              error={pickupZipValidator !== ''}\r\n              helperText={pickupZipValidator === '' ? ' ' : pickupZipValidator}\r\n              type=\"number\"\r\n              id=\"pickupzip\"\r\n              name=\"pickupzip\"\r\n              label=\"Pickup Zip\"\r\n              fullWidth\r\n              value={props.pickupPin}\r\n              onChange={(event)=>onPickupZipChangeController(event)}\r\n              autoComplete=\"Pickup postal-code\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <TextField\r\n              required\r\n              error={pickupDateValidator !== ''}\r\n              helperText={pickupDateValidator === '' ? ' ' : pickupDateValidator}\r\n              id=\"pickupdate\"\r\n              name=\"pickupdate\"\r\n             label='Pickup Date(dd/mm/yyyy)'\r\n              fullWidth\r\n              type='date'\r\n              // defaultValue='2021-01-01'\r\n              value={props.pickupDate}\r\n              onChange={(event)=>onPickupDateChangeController(event)}\r\n              autoComplete=\"shipping address-line1\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={2}>\r\n                            <FormControl className={classes.formControl}>\r\n                                <InputLabel htmlFor=\"age-native-simple\">Pickup Slot</InputLabel>\r\n                                <Select\r\n                                    native\r\n                                    value={props.pickupSlot}\r\n                                    onChange={(event) => onTimeSlotChangeController(event)}\r\n                                    inputProps={{\r\n                                        name: 'age',\r\n                                        id: 'age-native-simple',\r\n                                    }}\r\n                                >\r\n                                    {constants.timeSlots.map((d) => <option value={d.value}>{d.name}</option>)}\r\n                                    \r\n                                </Select>\r\n                            </FormControl>\r\n                        </Grid>\r\n          <Grid item xs={12} sm={5}>\r\n            <TextField\r\n              id=\"destinationaddress\"\r\n              name=\"destinationaddress\"\r\n              label=\"Destination address\"\r\n              fullWidth\r\n              value={props.destinationAddress}\r\n              onChange={(event)=>onDestinationChangeController(event)}\r\n              autoComplete=\"shipping address-line2\"\r\n            />\r\n          </Grid>\r\n\r\n          <Grid item xs={12} sm={2}>\r\n            <TextField\r\n               required\r\n               error={deliverZipValidator !== ''}\r\n              helperText={deliverZipValidator === '' ? ' ' : deliverZipValidator}\r\n               type=\"number\"\r\n               id=\"destinationzip\"\r\n               name=\"destinationzip\"\r\n               label=\"Destination Zip\"\r\n               fullWidth\r\n               value={props.destinationPin}\r\n               onChange={(event)=>onDestinationZipChangeController(event)}\r\n               autoComplete=\"Destination postal-code\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={3}>\r\n            <TextField\r\n              error={deliveryDateValidator !== ''}\r\n              helperText={deliveryDateValidator === '' ? ' ' : deliveryDateValidator}\r\n              id=\"deliverydate\"\r\n              name=\"deliverydate\"\r\n              label='Desired Delivery date'\r\n              fullWidth\r\n              type='date'\r\n              value={props.deliveryDate}\r\n              onChange={(event)=>onDeliveryDateChangeController(event)}\r\n              autoComplete=\"shipping address-line1\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Typography className={classes.formHeadings} >Additional Note</Typography>\r\n\r\n        <Grid container  spacing={3} style={{ padding:50, paddingTop: 20 ,paddingBottom: 30 }}>\r\n        <TextareaAutosize style={{minWidth:400}} \r\n        aria-label=\"minimum height\"\r\n        value={props.additionalNote}\r\n        onChange={(event) => onAdditionalNoteChangeController(event)}\r\n         rowsMin={6} rowsMax={12} \r\n        placeholder=\"Share if Any...\" \r\n        />\r\n        </Grid>\r\n      </form>\r\n    </CardContent>\r\n  )\r\n}\r\n\r\nconst mapStateToProps=state=>{\r\n  return{\r\n    pickupAddress:state.order.pickupAddress,\r\n    pickupPin:state.order.pickupPin,\r\n    destinationAddress:state.order.destinationAddress,\r\n    destinationPin:state.order.destinationPin,\r\n    pickupDate:state.order.pickupDate,\r\n    deliveryDate:state.order.deliveryDate,\r\n    pickupSlot:state.order.pickupSlot,\r\n    additionalNote:state.order.additionalNote,\r\n    chosenProducts:state.order.chosenProducts\r\n  }\r\n}\r\n\r\nconst mapDispatchToProps=dispatch=>{\r\n  return {\r\n      setPickupAddressDispatcher:(pAddress)=>dispatch(actions.setPickupAddress(pAddress)),\r\n      setDestinationAddressDispatcher:(dAddress)=>dispatch(actions.setDestinationAddress(dAddress)),\r\n      setPickupPinDispatcher:(pPin)=>dispatch(actions.setPickupPin(pPin)),\r\n      setDestinationPinDispatcher:(dPin)=>dispatch(actions.setDestinationPin(dPin)),\r\n      setPickupDateDispatcher:(pdate)=>dispatch(actions.setPickupDate(pdate)),\r\n      setDeliveryDateDispatcher:(ddate)=>dispatch(actions.setDeliveryDate(ddate)),\r\n      setPickupSlotDispatcher:(slot)=>dispatch(actions.setPickupSlot(slot)),\r\n      setAdditionalNoteDispatcher:(note)=>dispatch(actions.setAdditionalNote(note))\r\n  };\r\n}\r\n\r\nexport default connect(mapStateToProps,mapDispatchToProps)(BuyerDetails);\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\store\\actions\\login.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\Constants\\constants.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Forms\\ProductDetails.js",["282","283","284","285","286","287","288","289","290"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetails\\CompleteDetails.js",["291","292","293","294"],"import React,{useState,useEffect} from 'react'\r\nimport CardContent from '@material-ui/core/CardContent';\r\nimport Typography from '@material-ui/core/Typography';\r\nimport constants from '../../Constants/constants';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Spinner from '../UI/Spinner'\r\n\r\nimport List from '@material-ui/core/List';\r\nimport ListItem from '@material-ui/core/ListItem';\r\nimport ListItemText from '@material-ui/core/ListItemText';\r\nimport ListSubheader from '@material-ui/core/ListSubheader';\r\n\r\n\r\nimport {API,Auth} from 'aws-amplify'\r\nimport {\r\n    Grid,\r\n    Card,\r\n  } from '@material-ui/core'\r\n\r\n\r\n  const useStyles = makeStyles((theme) => ({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    },\r\n    proot: {\r\n        width: '100%',\r\n        maxWidth: 360,\r\n        backgroundColor: theme.palette.background.paper,\r\n        position: 'relative',\r\n        overflow: 'auto',\r\n        maxHeight: 200,\r\n      },\r\n      listSection: {\r\n        backgroundColor: 'inherit',\r\n      },\r\n      ul: {\r\n        backgroundColor: 'inherit',\r\n        padding: 0,\r\n      },\r\n}));\r\n\r\nconst Complete = (props) => {\r\n    const classes = useStyles()\r\n    const [allDetails,setAllDetails] = useState(null)\r\n    console.log(props.orderId)\r\n    useEffect(async ()=>{\r\n        var currentUser = await Auth.currentUserInfo()\r\n        API\r\n        .get(\"GoFlexeOrderPlacement\", `/combinedview?orderId=${props.orderId}`)\r\n        .then(resp=>{\r\n            console.log(resp)\r\n            setAllDetails(resp)\r\n        })\r\n        \r\n    },[])\r\n    if(allDetails===null){\r\n        return(\r\n            <Spinner />\r\n        )\r\n    }\r\n    return (\r\n      <React.Fragment>\r\n        {allDetails.broadcastOrderData.length > 0 && (\r\n          <Card className={classes.root}>\r\n            <CardContent style={{ padding: 0, marginTop: 10 }}>\r\n              <Typography\r\n                className={classes.title}\r\n                gutterBottom\r\n                style={{ color: \"black\", backgroundColor: \"lightgrey\" }}\r\n              >\r\n                Broadcast Details\r\n              </Typography>\r\n              <table>\r\n                <Grid\r\n                  container\r\n                  spacing={3}\r\n                  style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n                >\r\n                  <Grid item xs={12} sm={6}>\r\n                    <tr>\r\n                      <th scope=\"row\"> Broadcast Order Id :</th>\r\n                      <td>\r\n                        {allDetails.broadcastOrderData[0].broadcastOrderId}\r\n                      </td>\r\n                    </tr>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <tr>\r\n                      <th scope=\"row\">Customer OrderId :</th>\r\n                      <td>\r\n                        {allDetails.broadcastOrderData[0].customerOrderId}\r\n                      </td>\r\n                    </tr>\r\n                  </Grid>\r\n                  {/* <Grid item xs={12} sm={6} >\r\n                                            <tr>\r\n                                                <th scope=\"row\">Receipients:</th>\r\n                                                <td>{\r\n                                                        allDetails.broadcastOrderData[0].receipients.map((rec,idx) =>{\r\n                                                            return('('+idx+')'+rec.userName)\r\n                                                        })\r\n                                                    }</td>\r\n                                            </tr>\r\n                                        </Grid> */}\r\n                  <Grid item xs={12} sm={6}>\r\n                    <tr>\r\n                      <th scope=\"row\">Status :</th>\r\n                      <td>{allDetails.broadcastOrderData[0].status}</td>\r\n                    </tr>\r\n                  </Grid>\r\n\r\n                  <Grid item xs={12} sm={6}>\r\n                    <List className={classes.proot} subheader={<li />}>\r\n                      {\r\n                        <li key=\"receipients\" className={classes.listSection}>\r\n                          <ul className={classes.ul}>\r\n                            <ListSubheader>{`Broadcast Reciepients`}</ListSubheader>\r\n                            {allDetails.broadcastOrderData[0].receipients.map(\r\n                              (item, idx) => (\r\n                                <ListItem key={`item--${idx}`}>\r\n                                  <ListItemText\r\n                                    primary={`${idx + 1})${item.userName}`}\r\n                                  />\r\n                                </ListItem>\r\n                              )\r\n                            )}\r\n                          </ul>\r\n                        </li>\r\n                      }\r\n                    </List>\r\n                  </Grid>\r\n                </Grid>\r\n              </table>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n        {allDetails.serviceOrderData.length > 0 && (\r\n          <Card className={classes.root}>\r\n            <CardContent style={{ padding: 0, marginTop: 10 }}>\r\n              <Typography\r\n                className={classes.title}\r\n                gutterBottom\r\n                style={{ color: \"black\", backgroundColor: \"lightgrey\" }}\r\n              >\r\n                Service Provider Details\r\n              </Typography>\r\n              <table>\r\n                <Grid\r\n                  container\r\n                  spacing={3}\r\n                  style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n                >\r\n                  <Grid item xs={12} sm={6}>\r\n                    <tr>\r\n                      <th scope=\"row\"> Service Order Id :</th>\r\n                      <td>{allDetails.serviceOrderData[0].ServiceOrderId}</td>\r\n                    </tr>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <tr>\r\n                      <th scope=\"row\">Customer OrderId :</th>\r\n                      <td>{allDetails.serviceOrderData[0].customerOrderId}</td>\r\n                    </tr>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <tr>\r\n                      <th scope=\"row\">Display Id:</th>\r\n                      <td>{allDetails.serviceOrderData[0].displayId}</td>\r\n                    </tr>\r\n                  </Grid>\r\n                  <Grid item xs={12} sm={6}>\r\n                    <tr>\r\n                      <th scope=\"row\">Service Provider Id :</th>\r\n                      <td>\r\n                        {allDetails.serviceOrderData[0].serviceProviderId}\r\n                      </td>\r\n                    </tr>\r\n                  </Grid>\r\n                </Grid>\r\n              </table>\r\n            </CardContent>\r\n          </Card>\r\n        )}\r\n        <Card className={classes.root}>\r\n          <CardContent style={{ padding: 0, marginTop: 10 }}>\r\n            <Typography\r\n              className={classes.title}\r\n              gutterBottom\r\n              style={{ color: \"black\", backgroundColor: \"lightgrey\" }}\r\n            >\r\n              Order Details\r\n            </Typography>\r\n            <table>\r\n              <Grid\r\n                container\r\n                spacing={3}\r\n                style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n              >\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Order Id :</th>\r\n                    <td>{allDetails.customerOrderData[0].OrderId}</td>\r\n                  </tr>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Customer Email :</th>\r\n                    <td>{allDetails.customerOrderData[0].customerEmail}</td>\r\n                  </tr>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Expected Delivery date :</th>\r\n                    <td>{allDetails.customerOrderData[0].deliveryDate}</td>\r\n                  </tr>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\">Order date:</th>\r\n                    <td>{allDetails.customerOrderData[0].orderDate}</td>\r\n                  </tr>\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                  <tr>\r\n                    <th scope=\"row\"></th>\r\n                    <td></td>\r\n                  </tr>\r\n                </Grid>\r\n              </Grid>\r\n            </table>\r\n          </CardContent>\r\n        </Card>\r\n      </React.Fragment>\r\n    );\r\n}\r\nexport default Complete;","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\AddProductForm.js",["295","296","297","298","299"],"import React, { useState } from \"react\";\r\nimport Select  from 'react-select'\r\nimport \"../../Globalcss/globalcss.css\"\r\n/// /inventory      get(id,owner,type)\r\n// /pricing get(length,width,height,toPin,fromPin,weightPerUnit,measureable=true/false,other)\r\nimport {\r\n  TextField,\r\n  FormControlLabel,\r\n  Grid,\r\n  FormControl,\r\n  InputLabel,\r\n  Button,\r\n  \r\n  Switch,\r\n  InputAdornment,\r\n} from \"@material-ui/core\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles,withStyles } from \"@material-ui/core/styles\";\r\nimport { Multiselect } from \"multiselect-react-dropdown\";\r\nimport constants from \"../../Constants/constants\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    // minWidth: 275,\r\n  },\r\n  // title: {\r\n  //   fontSize: 20,\r\n  //   height: 50,\r\n  //   padding: 10,\r\n  //   paddingLeft: 55,\r\n  //   color: \"white\",\r\n  // },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n  formControl: {\r\n    marginTop: \"1%\",\r\n  },\r\n  container: {\r\n    justifyContent: \"space-between\",\r\n    flexDirection: \"column\",\r\n    display: \"flex\",\r\n  },\r\n  btnHolder: {\r\n    justifyContent: \"flex-end\",\r\n    display: \"flex\",\r\n    marginRight: \"30px\",\r\n    marginBottom: \"30px\",\r\n  },\r\n});\r\nconst AntSwitch = withStyles((theme) => ({\r\n  root: {\r\n    width: 28,\r\n    height: 16,\r\n    padding: 0,\r\n    display: 'flex',\r\n  },\r\n  switchBase: {\r\n    padding: 2,\r\n    color: theme.palette.grey[500],\r\n    '&$checked': {\r\n      transform: 'translateX(12px)',\r\n      color: theme.palette.common.white,\r\n      '& + $track': {\r\n        opacity: 1,\r\n        backgroundColor: theme.palette.primary.main,\r\n        borderColor: theme.palette.primary.main,\r\n      },\r\n    },\r\n  },\r\n  thumb: {\r\n    width: 12,\r\n    height: 12,\r\n    boxShadow: 'none',\r\n  },\r\n  track: {\r\n    border: `1px solid ${theme.palette.grey[500]}`,\r\n    borderRadius: 16 / 2,\r\n    opacity: 1,\r\n    backgroundColor: theme.palette.common.white,\r\n  },\r\n  checked: {},\r\n}))(Switch);\r\nconst AddProductForm = (props) => {\r\n  const classes = useStyles();\r\n  const [newProductName, setNewProductName] = useState(\"\");\r\n  const [newProductType, setNewProductType] = useState(\"\");\r\n  const [unit, setUnit] = useState(\"centimeters\");\r\n  const [height, setHeight] = useState();\r\n  const [width, setWidth] = useState();\r\n  const [length, setLength] = useState();\r\n  const [weightPerUnit, setWeightPerunit] = useState();\r\n  const [location, setLocation] = useState();\r\n  const [categories, setCategories] = useState([]);\r\n  const [loading, setLoading] = useState(false);\r\n  const [pinCode,setPinCode] = useState()\r\n  const [density, setDensity] = useState();\r\n  const [switchToggler, setSwitchToggler] = useState(true);\r\n\r\n\r\n  /**Errors Validator */\r\n  const [pinValidator, setPinValidator] = useState(\"\");\r\n  const [lengthValidator,setLengthValidator] = useState(\"\");\r\n  const [widthValidator,setWidthValidator] = useState(\"\")\r\n  const [heightValidator,setHeightValidator] = useState(\"\")\r\n  const [weightPerUnitValidator,setWeightPerUnitValidator] = useState(\"\")\r\n\r\n  const selectStyles = {\r\n    menu: base => ({\r\n      ...base,\r\n      zIndex: 100\r\n    })\r\n  };\r\n\r\n  const handleTypeChange = (event) => {\r\n    setNewProductType(event)\r\n  }\r\n  const handleSwitchTogglerChange = (event) => {\r\n    setSwitchToggler(!switchToggler);\r\n  };\r\n  const onPinChangeController = (event) => {\r\n    var pickupPinCode = parseInt(event.target.value, 10);\r\n    var greater = 999999,\r\n      smaller = 100000;\r\n    var check = 1;\r\n    if (pickupPinCode < smaller || pickupPinCode > greater) {\r\n      setPinValidator(\"Must be of 6 digits\");\r\n      check = 0;\r\n    }\r\n    if (pickupPinCode < 0) {\r\n      setPinValidator(\"Cannot be negative\");\r\n      check = 0;\r\n    }\r\n    if (check === 1) {\r\n      setPinValidator(\"\");\r\n    }\r\n    setPinCode(event.target.value)\r\n  }\r\n  const onHeightChangeController = (event) => {\r\n    if(event.target.value<0){\r\n      setHeightValidator(\"Height cannot be negative\")\r\n    }\r\n    else{\r\n      setHeightValidator(\"\")\r\n    }\r\n    setHeight(event.target.value);\r\n  };\r\n  const onWidthChangeController = (event) => {\r\n    if(event.target.value<0)\r\n    {\r\n      setWidthValidator(\"Width cannot be negative\")\r\n    }\r\n    else{\r\n      setWidthValidator(\"\")\r\n    }\r\n    setWidth(event.target.value);\r\n  };\r\n  const onLengthChangeController = (event) => {\r\n    if(event.target.value<0){\r\n      setLengthValidator(\"Length cannot be negative\")\r\n    }\r\n    else{\r\n      setLengthValidator(\"\")\r\n    }\r\n    setLength(event.target.value);\r\n  };\r\n  const onCategoryChange = (event) => {\r\n    setCategories(event)\r\n  }\r\n  const unitChangeController = (event) => {\r\n    setUnit(event)\r\n  };\r\n  const onProductNameChange = (event) => {\r\n    setNewProductName(event.target.value);\r\n  };\r\n \r\n  const onWeightPerUnitChangeController = (event) => {\r\n    if(event.target.value<0){\r\n      setWeightPerUnitValidator(\"Weight Per unit cannot be negative\")\r\n    }\r\n    else{\r\n      setWeightPerUnitValidator(\"\")\r\n    }\r\n    setWeightPerunit(event.target.value);\r\n  };\r\n  const onLocationChangeController = (event) => {\r\n    setLocation(event.target.value);\r\n  };\r\n  const onDensityChangeController = (event) => {\r\n    setDensity(event.target.value);\r\n  };\r\n\r\n  const submitTruck = async () => {\r\n    setLoading(true);\r\n    var currentUser = await Auth.currentUserInfo();\r\n    var owner = currentUser.username;\r\n    var data;\r\n   \r\n      data = {\r\n        owner: owner,\r\n        productName: newProductName,\r\n        productType: newProductType,\r\n        unit: unit,\r\n        height: height,\r\n        width: width,\r\n        length: length,\r\n        weightPerUnit: weightPerUnit,\r\n        location: location,\r\n        categories: categories,\r\n        measurable:switchToggler,\r\n        density:density,\r\n        pincode:pinCode\r\n      };\r\n    \r\n\r\n    const payload = {\r\n      body: data,\r\n    };\r\n    API.post(\"GoFlexeOrderPlacement\", `/inventory`, payload)\r\n      .then((response) => {\r\n        // Add your code here\r\n        console.log(response);\r\n        setLoading(false);\r\n      })\r\n      .catch((error) => {\r\n        console.log(error.response);\r\n        setLoading(false);\r\n      });\r\n    console.log(data);\r\n    setLoading(false);\r\n    props.toggleForm();\r\n  };\r\n\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n\r\n\r\n\r\n\r\n  /*IF the product is measureable with length width height */\r\n  var measureablePerUnit = (\r\n    <React.Fragment>\r\n      <Grid container spacing={3} style={{ padding: 50, paddingTop: 10 }}>\r\n        <Grid item xs={12} sm={2}>\r\n             <Select\r\n                styles={selectStyles}\r\n                className=\"basic-single\"\r\n                classNamePrefix=\"Unit\"\r\n                isSearchable\r\n                name=\"unit\"\r\n                placeholder=\"Unit\"\r\n                onChange={(event)=>unitChangeController(event)}\r\n                options={constants.lengthDimensions}\r\n        />\r\n          {/* </FormControl> */}\r\n        </Grid>\r\n        <Grid item xs={12} sm={4}></Grid>\r\n        <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"number\"\r\n              error={weightPerUnitValidator !== \"\"}\r\n              helperText={\r\n              weightPerUnitValidator === \"\" ? \" \" : weightPerUnitValidator\r\n              }\r\n              id=\"weightPerUnit\"\r\n              name=\"weightPerUnit\"\r\n              label=\"Weight Per Unit(in Kg)\"\r\n              fullWidth\r\n              value={weightPerUnit}\r\n              variant='outlined'\r\n              size='small'\r\n              // style={{backgroundColor:'#fff'}}\r\n              autoComplete=\"weightPerUnit\"\r\n              onChange={(event) => onWeightPerUnitChangeController(event)}\r\n            />\r\n          </Grid>\r\n        <Grid item xs={12} sm={4}>\r\n          <TextField\r\n            type=\"number\"\r\n            error={heightValidator !== \"\"}\r\n              helperText={\r\n              heightValidator === \"\" ? \" \" : heightValidator\r\n            }\r\n            id=\"height\"\r\n            name=\"height\"\r\n            label=\"Height\"\r\n            fullWidth\r\n            value={height}\r\n            autoComplete=\"Height\"\r\n            variant='outlined'\r\n            size='small'\r\n            // style={{backgroundColor:'#fff'}}\r\n            onChange={(event) => onHeightChangeController(event)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={4}>\r\n          <TextField\r\n            type=\"number\"\r\n            error={widthValidator !== \"\"}\r\n              helperText={\r\n              widthValidator === \"\" ? \" \" : widthValidator\r\n            }\r\n            id=\"width\"\r\n            name=\"width\"\r\n            label=\"Width\"\r\n            fullWidth\r\n            value={width}\r\n            autoComplete=\"width\"\r\n            variant='outlined'\r\n            size='small'\r\n            // style={{backgroundColor:'#fff'}}\r\n            onChange={(event) => onWidthChangeController(event)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={4}>\r\n          <TextField\r\n            type=\"number\"\r\n            error={lengthValidator !== \"\"}\r\n              helperText={\r\n              lengthValidator === \"\" ? \" \" : lengthValidator\r\n            }\r\n            id=\"length\"\r\n            name=\"length\"\r\n            label=\"Length\"\r\n            value={length}\r\n            fullWidth\r\n            variant='outlined'\r\n            size='small'\r\n            // style={{backgroundColor:'#fff'}}\r\n            onChange={(event) => onLengthChangeController(event)}\r\n            autoComplete=\"Length\"\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n  var notMeasureable = (\r\n    <React.Fragment>\r\n      \r\n      {/*test*/}\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        {/* <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"number\"\r\n            id=\"totalWeight\"\r\n            name=\"totalWeight\"\r\n            label=\"Total Weight(in Tons)\"\r\n            value={totalWeight}\r\n            onChange={(event) => onTotalWeightChangeController(event)}\r\n            fullWidth\r\n          />\r\n        </Grid> */}\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"density\"\r\n            name=\"density\"\r\n            label=\"Weight per cubic meter\"\r\n            fullWidth\r\n            value={density}\r\n            variant='outlined'\r\n            size='small'\r\n            // style={{backgroundColor:'#fff'}}\r\n            onChange={(event) => onDensityChangeController(event)}\r\n            InputProps={{\r\n              endAdornment: <InputAdornment position=\"end\">Kg</InputAdornment>,\r\n            }}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      <Typography\r\n        fullWidth\r\n        className=\"TypographyTitle\"\r\n        gutterBottom\r\n        \r\n      >\r\n        Product Details\r\n      </Typography>\r\n      <form>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ paddingLeft: 50, paddingRight: 50, paddingTop: 10 }}\r\n        >\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              required\r\n              type=\"text\"\r\n              id=\"productName\"\r\n              name=\"productName\"\r\n              label=\"Enter Product Name\"\r\n              value={newProductName}\r\n              variant='outlined'\r\n              size='small'\r\n              // style={{backgroundColor:'#fff'}}\r\n              onChange={(event) => onProductNameChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n          <Select\r\n          styles={selectStyles}\r\n          className=\"basic-single\"\r\n          classNamePrefix=\"select\"\r\n          onChange={(event)=>handleTypeChange(event)}\r\n          isSearchable\r\n          name=\"productType\"\r\n          placeholder=\"Product Type\"\r\n          options={constants.typesOfProducts}\r\n        />\r\n          </Grid>\r\n          {/* <Grid item xs={12} sm={8}>\r\n            <Multiselect\r\n              style={{\r\n                borderLeft: \"0px\",\r\n                overflow: \"hidden\",\r\n                multiselectContainer: { height: \"75px\" },\r\n              }}\r\n              options={capabilityOptions.options} // Options to display in the dropdown\r\n              onSelect={onMultiSelect} // Function will trigger on select event\r\n              onRemove={onMultiRemove} // Function will trigger on remove event\r\n              displayValue=\"name\" // Property name to display in the dropdown options\r\n              placeholder=\"Features(Select Many)\"\r\n            />\r\n          </Grid> */}\r\n          <Grid item xs={12} sm={6}>\r\n          <Select\r\n              //defaultValue={[colourOptions[2], colourOptions[3]]}\r\n              isMulti\r\n              styles={selectStyles}\r\n              name=\"categories\"\r\n              options={constants.inventoryCategory}\r\n              placeholder=\"Category(Select Multiple)\"\r\n              className=\"basic-multi-select\"\r\n              onChange={(event)=>onCategoryChange(event)}\r\n              classNamePrefix=\"select\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        {/* <Typography className={classes.formHeadings}>Dimensions</Typography> */}\r\n        {/* <FormControlLabel\r\n          style={{ margin: 20 }}\r\n          control={\r\n            <Switch\r\n              checked={switchToggler}\r\n              onChange={handleSwitchTogglerChange}\r\n              name=\"checkedB\"\r\n              color=\"primary\"\r\n            />\r\n          }\r\n          label=\"(Measureable Dimensions)\"\r\n        /> */}\r\n        <Grid component=\"label\" container style={{fontSize:18,marginTop:20,marginBottom:20}} alignItems=\"center\" spacing={1}>\r\n                <Grid item>Total Weight</Grid>\r\n                <Grid item>\r\n                    <AntSwitch checked={switchToggler} onChange={()=>handleSwitchTogglerChange()} name=\"checkedC\" />\r\n                </Grid>\r\n                <Grid item>No. Of Units</Grid>\r\n                </Grid>\r\n        {switchToggler === true ? measureablePerUnit : notMeasureable}\r\n\r\n        <Typography className={classes.formHeadings}>Other Details</Typography>\r\n        <Grid container spacing={3} style={{ padding: 50, paddingTop: 10 }}>\r\n        <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              required\r\n              type=\"number\"\r\n              error={pinValidator !== \"\"}\r\n                helperText={\r\n                  pinValidator === \"\" ? \" \" : pinValidator\r\n              }\r\n              id=\"pinCode\"\r\n              name=\"pinCode\"\r\n              label=\"Pin\"\r\n              value={pinCode}\r\n              fullWidth\r\n              onChange={(event) => onPinChangeController(event)}\r\n              variant='outlined'\r\n              size='small'\r\n              // style={{backgroundColor:'#fff'}}\r\n              autoComplete=\"pinCode\"\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              required\r\n              type=\"text\"\r\n              id=\"location\"\r\n              name=\"location\"\r\n              label=\"Location\"\r\n              value={location}\r\n              fullWidth\r\n              onChange={(event) => onLocationChangeController(event)}\r\n              variant='outlined'\r\n              size='small'\r\n              // style={{backgroundColor:'#fff'}}\r\n              autoComplete=\"Location\"\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n        <Button\r\n          onClick={submitTruck}\r\n          className=\"row AllButtons\"\r\n          variant=\"contained\"\r\n          style={{\r\n            float: \"right\",\r\n            \r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          Submit\r\n        </Button>\r\n        <Button\r\n          onClick={() => props.toggleForm()}\r\n          className=\"row\"\r\n          variant=\"contained\"\r\n          color=\"default\"\r\n          style={{\r\n            float: \"right\",\r\n            marginRight: \"10px\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          Cancel\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default AddProductForm;","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\ShowProducts.js",["300","301"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Inventory\\EditForm.js",["302","303","304","305"],"import React,{useEffect, useState} from 'react'\r\n/// /inventory      get(id,owner,type)\r\n// /pricing get(length,width,height,toPin,fromPin,weightPerUnit,measureable=true/false,other)\r\nimport {\r\n    TextField,\r\n    Grid,\r\n    FormControl,\r\n    InputLabel,\r\n    Button,\r\n    Select,\r\n    Breadcrumbs\r\n  } from '@material-ui/core'\r\nimport {Auth,API} from 'aws-amplify'\r\nimport Spinner from '../UI/Spinner'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { Multiselect } from 'multiselect-react-dropdown';\r\nimport constants from '../../Constants/constants'\r\nimport {Link} from 'react-router-dom'\r\nimport \"../../Globalcss/globalcss.css\"\r\n  const useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    // title: {\r\n    //     fontSize: 20,\r\n    //     height: 50,\r\n    //     padding: 10,\r\n    //     paddingLeft: 55,\r\n    //     color: 'white'\r\n    // },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    },\r\n    container :{\r\n        justifyContent: 'space-between',\r\n        flexDirection: 'column',\r\n        display: 'flex'\r\n    },\r\n    btnHolder: {\r\n        justifyContent: 'flex-end',\r\n        display: 'flex',\r\n        marginRight:'30px',\r\n        marginBottom:'30px'\r\n      }\r\n});\r\n\r\nconst AddProductForm = (props) => {\r\n    const classes = useStyles()\r\n    const [newProductName,setNewProductName] = useState(props.row.productName);\r\n    const [newProductType,setNewProductType] = useState(props.row.productType);\r\n    const [unit,setUnit] = useState('centimeters');\r\n    const [height,setHeight] = useState(props.row.height)\r\n    const [width,setWidth] = useState(props.row.width)\r\n    const [length,setLength] = useState(props.row.length)\r\n    const [weightPerUnit,setWeightPerunit] = useState(props.row.weightPerUnit)\r\n    const [location,setLocation] = useState(props.row.location)\r\n    const [features,setFeatures] = useState([])\r\n    const [loading,setLoading] = useState(false)\r\n    const capabilityOptions = {\r\n        options: constants.inventoryFeatures\r\n   \r\n    }\r\n  \r\n    const onMultiSelect = (selectedList, selectedItem) => {\r\n        // selectedList.map((select) => alert(select.name))\r\n        setFeatures(selectedList)\r\n    }\r\n    const onMultiRemove = (selectedList, removedItem) => {\r\n        // alert(selectedList)\r\n        setFeatures(selectedList)\r\n    }\r\n    const onHeightChangeController = (event) => {\r\n        setHeight(event.target.value)\r\n    }\r\n    const onWidthChangeController = (event) => {\r\n        setWidth(event.target.value)\r\n    }\r\n    const onLengthChangeController = (event) => {\r\n        setLength(event.target.value)\r\n    }\r\n    const unitChangeController = (event) => {\r\n        setUnit(event.target.value)\r\n    }\r\n    const onProductNameChange = (event) => {\r\n        setNewProductName(event.target.value)\r\n    }\r\n    const onProductTypeChange = (event) => {\r\n        setNewProductType(event.target.value)\r\n    }\r\n    const onWeightPerUnitChangeController = (event) => {\r\n        setWeightPerunit(event.target.value)\r\n    }\r\n    const onLocationChangeController = (event) => {\r\n        setLocation(event.target.value)\r\n    }\r\n    const submitTruck =  () => {\r\n        setLoading(true)\r\n       // alert(props.row.productType)\r\n        const data={\r\n            owner:props.row.owner,\r\n            productName: newProductName,\r\n            productId: props.row.productId,\r\n             productType: props.row.productType,\r\n            unit: unit,\r\n            height: height,\r\n            width: width,\r\n            length:length,\r\n            weightPerUnit: weightPerUnit,\r\n            location: location,\r\n            features: features\r\n        }\r\n        const payload = {\r\n            body: data\r\n        }\r\n        API\r\n        .put(\"GoFlexeOrderPlacement\", `/inventory?type=owner`, payload)\r\n        .then(response => {\r\n            // Add your code here\r\n            console.log(response);\r\n            setLoading(false)\r\n        })\r\n        .catch(error => {\r\n            console.log(error.response);\r\n            alert('Please Try again Later')\r\n            setLoading(false)\r\n        });\r\n       console.log(data)\r\n        setLoading(false)\r\n        props.editButtonClicked()\r\n               // var params = `type=owner&owner=${props.row.owner}&location=${location}&productType=${newProductType}&productName=${newProductName}&productId=${props.row.productId}`\r\n\r\n    }\r\n   \r\n    if(loading===true){\r\n        return(\r\n            <Spinner />\r\n        )\r\n    }\r\n\r\n    return(\r\n        <div style={{overflow:'hidden'}} >\r\n            <Breadcrumbs style={{marginBottom:'10px'}} aria-label=\"breadcrumb\">\r\n        <Link onClick={()=>props.editButtonClicked()} color=\"inherit\" to='/inventory-manager'>\r\n            Inventory\r\n        </Link>\r\n            <Typography color=\"textPrimary\">Edit Product</Typography>\r\n    </Breadcrumbs>\r\n        <Typography fullWidth className=\"TypographyTitle\" gutterBottom >\r\n                    Edit Product              \r\n        </Typography>         \r\n                <form>\r\n        <Grid container spacing={3} style={{ paddingLeft: 50,paddingRight:50, paddingTop: 10 }}>\r\n            \r\n            <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                    required\r\n                    type=\"text\"\r\n                    id=\"productName\"\r\n                    name=\"productName\"\r\n                    label=\"Enter Product Name\"\r\n                    value={newProductName}\r\n                    onChange={(event) => onProductNameChange(event)}\r\n                    fullWidth          \r\n                />\r\n            </Grid>\r\n            {/* <Grid item xs={12} sm={6}>\r\n                <TextField\r\n                    required\r\n                    type=\"text\"\r\n                    id=\"productType\"\r\n                    name=\"productType\"\r\n                    label=\"Enter Product Type\"\r\n                    value={newProductType}\r\n                    onChange={(event) => onProductTypeChange(event)}\r\n                    fullWidth          \r\n                />\r\n            </Grid> */}\r\n            <Grid item xs={12} sm={8}>\r\n                <Multiselect\r\n               \r\n                style={{borderLeft:'0px',overflow:'hidden', multiselectContainer:{height:'75px'} }}\r\n                    options={capabilityOptions.options} // Options to display in the dropdown\r\n                    onSelect={onMultiSelect} // Function will trigger on select event\r\n                    onRemove={onMultiRemove} // Function will trigger on remove event\r\n                    displayValue=\"name\" // Property name to display in the dropdown options\r\n                    placeholder=\"Features(Select Many)\"\r\n                    />\r\n\r\n                </Grid>\r\n        </Grid>   \r\n        \r\n        <Typography className={classes.formHeadings}>Dimensions per unit</Typography>\r\n            <Grid container spacing={3} style={{ padding: 50, paddingTop:10 }}>\r\n                <Grid item xs={12} sm={6}>\r\n                        <FormControl className={classes.formControl}>\r\n                            <InputLabel htmlFor=\"age-native-simple\">Unit</InputLabel>\r\n                            <Select\r\n                                native\r\n                                //value=\"inches\"\r\n                                onChange={unitChangeController}\r\n                                inputProps={{\r\n                                    name: 'age',\r\n                                    id: 'age-native-simple',\r\n                                }}\r\n                            >\r\n                               {constants.dimensionOptions.map((d) => <option value={d.value}>{d.name}</option>)}\r\n                            </Select>\r\n                        </FormControl>\r\n                    </Grid>\r\n\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                        required\r\n                        type=\"number\"\r\n                        id=\"height\"\r\n                        name=\"height\"\r\n                        label=\"Height\"\r\n                        fullWidth\r\n                        value={height}\r\n                        autoComplete=\"Height\"\r\n                        onChange={(event)=>onHeightChangeController(event)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                        type=\"number\"\r\n                        id=\"width\"\r\n                        name=\"width\"\r\n                        label=\"Width\"\r\n                        fullWidth\r\n                        value={width}\r\n                        autoComplete=\"width\"\r\n                        onChange={(event)=>onWidthChangeController(event)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                        required\r\n                        type=\"number\"\r\n                        id=\"length\"\r\n                        name=\"length\"\r\n                        label=\"Length\"\r\n                        value={length}\r\n                        fullWidth\r\n                        onChange={(event)=>onLengthChangeController(event)}\r\n                        autoComplete=\"Length\"\r\n                    />\r\n                </Grid>\r\n            </Grid>  \r\n            <Typography className={classes.formHeadings}>Other Details</Typography>\r\n            <Grid container spacing={3} style={{ padding: 50, paddingTop:10 }}>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                        type=\"number\"\r\n                        id=\"weightPerUnit\"\r\n                        name=\"weightPerUnit\"\r\n                        label=\"Weight Per Unit(in Kg)\"\r\n                        fullWidth\r\n                        value={weightPerUnit}\r\n                        autoComplete=\"weightPerUnit\"\r\n                        onChange={(event)=>onWeightPerUnitChangeController(event)}\r\n                    />\r\n                </Grid>\r\n                <Grid item xs={12} sm={6}>\r\n                    <TextField\r\n                        required\r\n                        type=\"text\"\r\n                        id=\"location\"\r\n                        name=\"location\"\r\n                        label=\"Location\"\r\n                        value={location}\r\n                        fullWidth\r\n                        onChange={(event)=>onLocationChangeController(event)}\r\n                        autoComplete=\"Location\"\r\n                    />\r\n                </Grid>\r\n            </Grid> \r\n        \r\n        <Button \r\n            onClick={submitTruck}\r\n            className=\"row\"\r\n            variant='contained' style={{float:'right',backgroundColor:'#f9a825', marginBottom:'10px'}}\r\n    >Submit</Button>\r\n<Button \r\n            onClick={() => props.editButtonClicked()}\r\n            className=\"row\"\r\n            variant='contained' color='default' style={{float:'right',marginRight:'10px', marginBottom:'10px'}}\r\n    >Cancel</Button>\r\n</form>\r\n\r\n    </div>\r\n    )\r\n}\r\nexport default AddProductForm","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\OrderDetails\\OrderDetails.js",["306","307"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\AccountDetails\\AccountIndex.js",["308","309","310","311","312","313","314","315","316","317"],"import React,{useEffect, useState} from 'react'\r\nimport Spinner from '../../UI/Spinner'\r\nimport {Link} from 'react-router-dom'\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    makeStyles,\r\n    Grid,\r\n    Breadcrumbs\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    }\r\n});\r\nconst AccountInfoIndex = (props) => {\r\n    const classes = useStyles()\r\n    const [accDetails,setAccDetails] = useState(props.accountDetails)\r\n   \r\n   \r\n    const fun = (page) => {\r\n        //alert(JSON.stringify(props))\r\n        props.changePage(page)\r\n    }\r\n   \r\n    return(\r\n        <React.Fragment>\r\n                                <table>\r\n                                    <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n                                        <Grid item xs={12} sm={6} >\r\n                                            <tr>\r\n                                                <th scope=\"row\">Account Holder Name:</th>\r\n                                                <td>{accDetails.accountHolderName}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">Account Number:</th>\r\n                                                <td>{accDetails.accountNumber}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">IFSC Code:</th>\r\n                                                <td>{accDetails.ifscCode}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                       \r\n\r\n                                    </Grid>\r\n                                </table>\r\n              \r\n        </React.Fragment>\r\n    )\r\n    \r\n}\r\nexport default AccountInfoIndex","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyKYCForm.js",["318","319","320","321","322"],"import React, { useEffect, useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport axios from \"axios\";\r\nimport { TextField, Grid, Button } from \"@material-ui/core\";\r\nimport { API, Auth } from \"aws-amplify\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst CompanyKYC = (props) => {\r\n  const [myState, setMyState] = useState({\r\n    registeredName: \"\",\r\n    registeredAddress: \"\",\r\n    registeredEmail: \"\",\r\n    registeredContactNo: \"\",\r\n    pan: \"\",\r\n    gstin: \"\",\r\n    accountHolderName: \"\",\r\n    accountNumber: \"\",\r\n    ifscCode: \"\",\r\n  });\r\n\r\n  const classes = useStyles();\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  const [aadharProof, setAadharProof] = useState();\r\n  const [panProof, setPanProof] = useState();\r\n  const [gstinProof, setGSTINProof] = useState();\r\n\r\n  const submitKYC = () => {\r\n    setLoading(true);\r\n    var panLink, gstinLink;\r\n    var aadharLink;\r\n\r\n    const metaData = {\r\n      contentType: aadharProof.type,\r\n    };\r\n    const payload = {\r\n      body: {\r\n        contentType: aadharProof.type,\r\n        metaData: metaData,\r\n      },\r\n    };\r\n    API.post(\r\n      \"GoFlexeOrderPlacement\",\r\n      \"/kyc/document?type=\" + \"serviceprovider\",\r\n      payload\r\n    )\r\n      .then((initiateResult) => {\r\n        aadharLink = `uploads/kycdocuments/${initiateResult.fileId}.${aadharProof.type}`;\r\n        axios\r\n          .put(initiateResult.s3PutObjectUrl, aadharProof, {\r\n            headers: {\r\n              \"Content-Type\": aadharProof.type,\r\n            },\r\n          })\r\n          .then((resp) => {\r\n            console.log(resp);\r\n            const metaData = {\r\n              contentType: panProof.type,\r\n            };\r\n            const payload = {\r\n              body: {\r\n                contentType: panProof.type,\r\n                metaData: metaData,\r\n              },\r\n            };\r\n            API.post(\r\n              \"GoFlexeOrderPlacement\",\r\n              \"/kyc/document?type=\" + \"serviceprovider\",\r\n              payload\r\n            )\r\n              .then((initiateResult) => {\r\n                panLink = `uploads/kycdocuments/${initiateResult.fileId}.${panProof.type}`;\r\n                axios\r\n                  .put(initiateResult.s3PutObjectUrl, panProof, {\r\n                    headers: {\r\n                      \"Content-Type\": panProof.type,\r\n                    },\r\n                  })\r\n                  .then((resp) => {\r\n                    console.log(resp);\r\n                    const metaData = {\r\n                      contentType: gstinProof.type,\r\n                    };\r\n                    const payload = {\r\n                      body: {\r\n                        contentType: gstinProof.type,\r\n                        metaData: metaData,\r\n                      },\r\n                    };\r\n                    API.post(\r\n                      \"GoFlexeOrderPlacement\",\r\n                      \"/kyc/document?type=\" + \"serviceprovider\",\r\n                      payload\r\n                    )\r\n                      .then((initiateResult) => {\r\n                        gstinLink = `uploads/kycdocuments/${initiateResult.fileId}.${gstinProof.type}`;\r\n                        axios\r\n                          .put(initiateResult.s3PutObjectUrl, gstinProof, {\r\n                            headers: {\r\n                              \"Content-Type\": gstinProof.type,\r\n                            },\r\n                          })\r\n                          .then((resp) => {\r\n                            console.log(resp);\r\n                            Auth.currentUserInfo()\r\n                              .then((userDetails) => {\r\n                                const payload = {\r\n                                  body: {\r\n                                    id: userDetails.username,\r\n                                    type: \"serviceprovider\",\r\n                                    selfInfo: {\r\n                                      companyInfo: {\r\n                                        registeredName: myState.registeredName,\r\n                                        registeredAddress:\r\n                                          myState.registeredAddress,\r\n                                        registeredEmail:\r\n                                          myState.registeredEmail,\r\n                                        registeredContactNo:\r\n                                          myState.registeredContactNo,\r\n                                        registrationProofLink: aadharLink,\r\n                                      },\r\n                                      taxInfo: {\r\n                                        pan: myState.pan,\r\n                                        gstin: myState.gstin,\r\n                                        panLink: panLink,\r\n                                        gstinLink: gstinLink,\r\n                                      },\r\n                                      accountInfo: {\r\n                                        accountHolderName:\r\n                                          myState.accountHolderName,\r\n                                        accountNumber: myState.accountNumber,\r\n                                        ifscCode: myState.ifscCode,\r\n                                      },\r\n                                    },\r\n                                  },\r\n                                };\r\n                                API.post(\r\n                                  \"GoFlexeOrderPlacement\",\r\n                                  \"/kyc/info?type=\" + \"serviceprovider\",\r\n                                  payload\r\n                                )\r\n                                  .then((resp) => console.log(resp))\r\n                                  .catch((err) => console.log(err));\r\n                              })\r\n                              .catch((err) => console.log(err));\r\n                          })\r\n                          .catch((err) => console.log(err));\r\n                      })\r\n                      .catch((err) => console.log(err));\r\n                  })\r\n                  .catch((err) => console.log(err));\r\n              })\r\n              .catch((err) => console.log(err));\r\n          })\r\n          .catch((err) => console.log(err));\r\n      })\r\n      .catch((err) => console.log(err));\r\n    setLoading(false);\r\n  };\r\n\r\n  const onAadharProofChange = (event) => {\r\n    setAadharProof(event.target.files[0]);\r\n  };\r\n  const onPanProofChange = (event) => {\r\n    setPanProof(event.target.files[0]);\r\n  };\r\n  const onGSTINProofChange = (event) => {\r\n    setGSTINProof(event.target.files[0]);\r\n  };\r\n  const fieldsChange = (event) => {\r\n    setMyState({ ...myState, [event.target.name]: event.target.value });\r\n  };\r\n\r\n  const CompanyDetailsForm = (\r\n    <React.Fragment>\r\n      <Typography className={classes.formHeadings}>Company Details</Typography>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"registeredName\"\r\n            name=\"registeredName\"\r\n            label=\"Registered Name\"\r\n            value={myState.registeredName}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"registeredAddress\"\r\n            name=\"registeredAddress\"\r\n            label=\"Registered Address\"\r\n            value={myState.registeredAddress}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"email\"\r\n            id=\"registeredEmail\"\r\n            name=\"registeredEmail\"\r\n            label=\"Offcial Email Id\"\r\n            value={myState.registeredEmail}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"number\"\r\n            id=\"registeredContactNo\"\r\n            name=\"registeredContactNo\"\r\n            label=\"Contact number\"\r\n            value={myState.registeredContactNo}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n            InputProps={{\r\n              startAdornment: (\r\n                <InputAdornment position=\"start\">+91</InputAdornment>\r\n              ),\r\n            }}\r\n          />\r\n        </Grid>\r\n\r\n        <Typography className={classes.formHeadings}>\r\n          Documents Upload\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12}>\r\n            <label>Registration Proof: </label>\r\n            <input\r\n              style={{ marginLeft: \"15px\" }}\r\n              type=\"file\"\r\n              onChange={(event) => onAadharProofChange(event)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const TaxDetails = (\r\n    <React.Fragment>\r\n      <Typography className={classes.formHeadings}>Tax Details</Typography>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"text\"\r\n            id=\"pan\"\r\n            name=\"pan\"\r\n            value={myState.pan}\r\n            onChange={(event) => fieldsChange(event)}\r\n            label=\"Enter PAN\"\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            required\r\n            type=\"text\"\r\n            id=\"gstin\"\r\n            name=\"gstin\"\r\n            label=\"GST Number\"\r\n            value={myState.gstin}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        {/* </Grid> */}\r\n\r\n        <Typography className={classes.formHeadings}>\r\n          Documents Upload\r\n        </Typography>\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12}>\r\n            <label>Pan Proof: </label>\r\n            <input\r\n              style={{ marginLeft: \"15px\" }}\r\n              type=\"file\"\r\n              onChange={(event) => onPanProofChange(event)}\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12}>\r\n            <label>GSTIN Proof: </label>\r\n            <input\r\n              style={{ marginLeft: \"15px\" }}\r\n              type=\"file\"\r\n              onChange={(event) => onGSTINProofChange(event)}\r\n            />\r\n          </Grid>\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  const AccountDetails = (\r\n    <React.Fragment>\r\n      <Typography className={classes.formHeadings}>Account Details</Typography>\r\n      <Grid\r\n        container\r\n        spacing={3}\r\n        style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n      >\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"accountHolderName\"\r\n            name=\"accountHolderName\"\r\n            label=\"Account Holder's Name\"\r\n            value={myState.accountHolderName}\r\n            onChange={(event) => fieldsChange(event)}\r\n            fullWidth\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"accountNumber\"\r\n            name=\"accountNumber\"\r\n            label=\"Account Number\"\r\n            value={myState.accountNumber}\r\n            fullWidth\r\n            onChange={(event) => fieldsChange(event)}\r\n          />\r\n        </Grid>\r\n        <Grid item xs={12} sm={6}>\r\n          <TextField\r\n            type=\"text\"\r\n            id=\"ifscCode\"\r\n            name=\"ifscCode\"\r\n            label=\"IFSC Code\"\r\n            value={myState.ifscCode}\r\n            fullWidth\r\n            onChange={(event) => fieldsChange(event)}\r\n          />\r\n        </Grid>\r\n      </Grid>\r\n    </React.Fragment>\r\n  );\r\n\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      <Typography\r\n        fullWidth\r\n        className={classes.title}\r\n        gutterBottom\r\n        style={{ backgroundColor: \"#66bb6a\" }}\r\n      >\r\n        Pending KYC\r\n      </Typography>\r\n      <form>\r\n        {CompanyDetailsForm}\r\n        {TaxDetails}\r\n        {AccountDetails}\r\n        <Button\r\n          onClick={submitKYC}\r\n          className=\"row\"\r\n          variant=\"contained\"\r\n          style={{\r\n            float: \"right\",\r\n            backgroundColor: \"#f9a825\",\r\n            marginBottom: \"10px\",\r\n          }}\r\n        >\r\n          Submit KYC\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default CompanyKYC;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyDetails\\IndexCompanyDetails.js",["323","324","325","326","327","328","329","330","331","332","333"],"import React,{useEffect, useState} from 'react'\r\nimport Spinner from '../../UI/Spinner'\r\nimport {Link} from 'react-router-dom'\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    makeStyles,\r\n    Grid,\r\n    Breadcrumbs\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    }\r\n});\r\nconst AccountInfoIndex = (props) => {\r\n    const classes = useStyles()\r\n    const [comDetails,setComDetails] = useState(props.companyDetails)\r\n    \r\n    const fun = (page) => {\r\n        //alert(JSON.stringify(props))\r\n        props.changePage(page)\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n                                <table>\r\n                                    <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n                                        <Grid item xs={12} sm={6} >\r\n                                            <tr>\r\n                                                <th scope=\"row\">Registered Name:</th>\r\n                                                <td>{comDetails.registeredName}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">Registered Address:</th>\r\n                                                <td>{comDetails.registeredAddress}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">Email:</th>\r\n                                                <td>{comDetails.registeredEmail}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">Contact:</th>\r\n                                                <td>{comDetails.registeredContactNo}</td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={6}>\r\n                                            <tr>\r\n                                                <th>Registraion Proof:</th>\r\n                                                <td>\r\n                                                <a href={'https://goflexe-kyc.s3.ap-south-1.amazonaws.com/'+comDetails.registrationDocLink} target={'_blank'} >Open</a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                    </Grid>\r\n                                </table>\r\n              \r\n        </React.Fragment>\r\n    )\r\n    \r\n}\r\nexport default AccountInfoIndex","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyDetails\\FormCompanyDetails.js",["334","335","336","337"],"import React, { useEffect, useState } from \"react\";\r\nimport Spinner from \"../../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport axios from \"axios\";\r\nimport \"../../../Globalcss/globalcss.css\";\r\nimport InputAdornment from \"@material-ui/core/InputAdornment\";\r\nimport { TextField, Grid, Button, Breadcrumbs } from \"@material-ui/core\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst CompanyKYC = (props) => {\r\n  const classes = useStyles();\r\n  const [registrationDoc, setRegistrationDoc] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [myState, setMyState] = useState({\r\n    registeredName: \"\",\r\n    registeredAddress: \"\",\r\n    registeredEmail: \"\",\r\n    registeredContactNo: \"\",\r\n  });\r\n  const fieldsChange = (event) => {\r\n    setMyState({ ...myState, [event.target.name]: event.target.value });\r\n  };\r\n  const submitKYC = () => {\r\n    setLoading(true);\r\n    var docLink;\r\n    const metaData = {\r\n      contentType: registrationDoc.type,\r\n    };\r\n    const payload = {\r\n      body: {\r\n        contentType: registrationDoc.type,\r\n        metaData: metaData,\r\n      },\r\n    };\r\n    var ext = registrationDoc.name.split(\".\").pop();\r\n    API.post(\r\n      \"GoFlexeOrderPlacement\",\r\n      \"/kyc/document?type=\" + \"customer\",\r\n      payload\r\n    )\r\n      .then((initiateResult) => {\r\n        docLink = `uploads/kycdocuments/customer/${initiateResult.fileId}.${ext}`;\r\n        axios\r\n          .put(initiateResult.s3PutObjectUrl, registrationDoc, {\r\n            headers: {\r\n              \"Content-Type\": registrationDoc.type,\r\n            },\r\n          })\r\n          .then((resp) => {\r\n            Auth.currentUserInfo()\r\n              .then((userDetails) => {\r\n                const payload = {\r\n                  body: {\r\n                    id: userDetails.username,\r\n                    type: \"customer\",\r\n                    kycInformation: {\r\n                      companyInfo: {\r\n                        registeredName: myState.registeredName,\r\n                        registeredAddress: myState.registeredAddress,\r\n                        registeredEmail: myState.registeredEmail,\r\n                        registeredContactNo: myState.registeredContactNo,\r\n                        registrationDocLink: docLink,\r\n                      },\r\n                    },\r\n                  },\r\n                };\r\n                API.post(\r\n                  \"GoFlexeOrderPlacement\",\r\n                  \"/kyc/info?type=\" + \"customer\",\r\n                  payload\r\n                )\r\n                  .then((resp) => {\r\n                    console.log(resp);\r\n                    fun();\r\n                  })\r\n                  .catch((err) => console.log(err));\r\n              })\r\n              .catch((err) => console.log(err));\r\n          })\r\n          .catch((err) => console.log(err));\r\n      })\r\n      .catch((err) => console.log(err));\r\n    setLoading(false);\r\n  };\r\n  const fun = () => {\r\n    //alert(JSON.stringify(props))\r\n    props.loadData();\r\n  };\r\n  const onRegistrationProofChange = (event) => {\r\n    setRegistrationDoc(event.target.files[0]);\r\n  };\r\n  if (loading === true) {\r\n    return <Spinner />;\r\n  }\r\n\r\n  return (\r\n    <div style={{ overflow: \"hidden\" }}>\r\n      {/* <Typography fullWidth className={classes.title} gutterBottom style={{ backgroundColor: '#66bb6a' }}>\r\n                            Pending KYC\r\n                        </Typography> */}\r\n      <form>\r\n        {/* <Typography className={classes.formHeadings} >Company Details</Typography> */}\r\n        <Grid\r\n          container\r\n          spacing={3}\r\n          style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n        >\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              id=\"registeredName\"\r\n              name=\"registeredName\"\r\n              label=\"Registered Name\"\r\n              value={myState.registeredName}\r\n              onChange={(event) => fieldsChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"text\"\r\n              id=\"registeredAddress\"\r\n              name=\"registeredAddress\"\r\n              label=\"Registered Address\"\r\n              value={myState.registeredAddress}\r\n              onChange={(event) => fieldsChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"email\"\r\n              id=\"registeredEmail\"\r\n              name=\"registeredEmail\"\r\n              label=\"Offcial Email Id\"\r\n              value={myState.registeredEmail}\r\n              onChange={(event) => fieldsChange(event)}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n          <Grid item xs={12} sm={6}>\r\n            <TextField\r\n              type=\"number\"\r\n              id=\"registeredContactNo\"\r\n              name=\"registeredContactNo\"\r\n              label=\"Contact number\"\r\n              value={myState.registeredContactNo}\r\n              onChange={(event) => fieldsChange(event)}\r\n              InputProps={{\r\n                startAdornment: (\r\n                  <InputAdornment position=\"start\">+91</InputAdornment>\r\n                ),\r\n              }}\r\n              fullWidth\r\n            />\r\n          </Grid>\r\n\r\n          <Typography className={classes.formHeadings}>\r\n            Documents Upload\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12}>\r\n              <label>Registration Proof: </label>\r\n              <input\r\n                style={{ marginLeft: \"15px\" }}\r\n                type=\"file\"\r\n                onChange={(event) => onRegistrationProofChange(event)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n        </Grid>\r\n\r\n        <Button\r\n          onClick={submitKYC}\r\n          className=\"row AllButtons\"\r\n          variant=\"contained\"\r\n          style={{ float: \"right\", marginBottom: \"10px\" }}\r\n        >\r\n          Submit KYC\r\n        </Button>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\nexport default CompanyKYC;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\TaxDetails\\TaxIndex.js",["338","339","340","341","342","343","344","345","346","347","348","349"],"import React,{useEffect, useState} from 'react'\r\nimport Spinner from '../../UI/Spinner'\r\nimport {Link} from 'react-router-dom'\r\nimport {\r\n    Card,\r\n    CardContent,\r\n    Typography,\r\n    makeStyles,\r\n    Grid,\r\n    Breadcrumbs\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n        // minWidth: 275,\r\n    },\r\n    title: {\r\n        fontSize: 20,\r\n        height: 50,\r\n        padding: 10,\r\n        paddingLeft: 55,\r\n        color: 'white'\r\n    },\r\n    formHeadings: {\r\n        margin: 20,\r\n        marginBottom: 0\r\n    },\r\n    formControl: {\r\n        marginTop:'1%'\r\n    }\r\n});\r\nconst TaxInfoIndex = (props) => {\r\n    const classes = useStyles()\r\n    const [taxDetails,setTaxDetails] = useState(props.taxDetails)\r\n    \r\n    const fun = (page) => {\r\n        //alert(JSON.stringify(props))\r\n        props.changePage(page)\r\n    }\r\n    \r\n    return(\r\n        <React.Fragment>\r\n\r\n                                <table>\r\n                                    <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n                                        <Grid item xs={12} sm={6} >\r\n                                            <tr>\r\n                                                <th scope=\"row\">PAN:</th>\r\n                                                <td>{taxDetails.pan}</td>\r\n                                                <td>\r\n                                                <a href={'https://goflexe-kyc.s3.ap-south-1.amazonaws.com/'+taxDetails.panLink} target={'_blank'} >(Open)</a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        <Grid item xs={12} sm={7}>\r\n                                            <tr>\r\n                                                <th scope=\"row\">GSTIN:</th>\r\n                                                <td>{taxDetails.gstin}</td>\r\n                                                <td>\r\n                                                <a href={'https://goflexe-kyc.s3.ap-south-1.amazonaws.com/'+taxDetails.gstinLink} target={'_blank'} >(Open)</a>\r\n                                                </td>\r\n                                            </tr>\r\n                                        </Grid>\r\n                                        \r\n                                    </Grid>\r\n                                </table>\r\n              \r\n        </React.Fragment>\r\n    )\r\n    \r\n}\r\nexport default TaxInfoIndex","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\TaxDetails\\TaxForm.js",["350","351","352","353","354"],"import React,{useEffect, useState} from 'react'\r\n\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Auth,API} from 'aws-amplify'\r\n import axios from 'axios'\r\nimport Spinner from \"../../UI/Spinner\";\r\nimport \"../../../Globalcss/globalcss.css\"\r\nimport {\r\n    TextField,\r\n    Grid,\r\n    Button,\r\n    Breadcrumbs\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n       minWidth: 275,\r\n    },\r\n    title: {\r\n      fontSize: 20,\r\n      height: 50,\r\n      padding: 10,\r\n      paddingLeft: 55,\r\n      color: 'white'\r\n    },\r\n    formHeadings: {\r\n      margin: 20,\r\n      marginBottom: 0\r\n    }\r\n  });\r\n\r\n\r\nconst CompanyKYC = (props) => {\r\n   \r\n    const classes = useStyles()\r\n    const [panDoc,setPanDoc] = useState()\r\n    const [gstDoc,setGSTDoc] = useState()\r\n    const [loading,setLoading] = useState(false)\r\n    const [myState,setMyState] = useState({\r\n        pan:'',\r\n        gstin:''\r\n    })\r\n    const fieldsChange = (event) => {\r\n        setMyState({...myState,[event.target.name]:event.target.value})\r\n    }\r\n    const submitKYC =  () => {\r\n        setLoading(true)\r\n        var panLink,gstinLink;\r\n        const metaData= {\r\n            'contentType': panDoc.type\r\n        }\r\n        const payload= {\r\n             body: {\r\n                 contentType: panDoc.type,\r\n                 metaData: metaData\r\n             }\r\n        }\r\n        var ext=panDoc.name.split('.').pop();\r\n        API.post(\r\n            \"GoFlexeOrderPlacement\", '/kyc/document?type='+'customer', payload)\r\n            .then((initiateResult)=>{\r\n                panLink = `uploads/kycdocuments/customer/${initiateResult.fileId}.${ext}`\r\n                axios.put(initiateResult.s3PutObjectUrl,panDoc,{\r\n                    headers: {\r\n                        'Content-Type': panDoc.type\r\n                    }\r\n                }).then(resp => {\r\n                    const metaData= {\r\n                        'contentType': gstDoc.type\r\n                    }\r\n                    const payload= {\r\n                         body: {\r\n                             contentType: gstDoc.type,\r\n                             metaData: metaData\r\n                         }\r\n                    }\r\n                    var ext=gstDoc.name.split('.').pop();\r\n                    API.post(\r\n                        \"GoFlexeOrderPlacement\", '/kyc/document?type='+'customer', payload)\r\n                        .then((initiateResult)=>{\r\n                            gstinLink = `uploads/kycdocuments/customer/${initiateResult.fileId}.${ext}`\r\n                            axios.put(initiateResult.s3PutObjectUrl,gstDoc,{\r\n                                headers: {\r\n                                    'Content-Type': gstDoc.type\r\n                                }\r\n                            }).then(res=>{\r\n                                Auth.currentUserInfo()\r\n                                .then((userDetails)=>{\r\n                                    const payload={\r\n                                        body:{\r\n                                            id:userDetails.username,\r\n                                            type:'customer',\r\n                                            kycInformation:{\r\n                                            \r\n                                            taxInfo:{\r\n                                            pan:myState.pan,\r\n                                            gstin:myState.gstin,\r\n                                            panLink:panLink,\r\n                                            gstinLink:gstinLink\r\n                                            },\r\n                                           \r\n                                        }\r\n                                        }\r\n                                    }\r\n                                        API.post(\"GoFlexeOrderPlacement\",'/kyc/info?type='+'customer',payload)\r\n                                        .then(resp=> {console.log(resp)\r\n                                        fun()})\r\n                                        .catch(err => console.log(err))\r\n                                })\r\n                                .catch(err=>console.log(err))\r\n                            })\r\n                            .catch(err=>console.log(err))\r\n                        })\r\n                        .catch(err=> console.log(err))\r\n                })\r\n                .catch(err=>console.log(err))\r\n            })\r\n            .catch(err=> console.log(err))\r\n            setLoading(false)\r\n    }\r\n    const fun = () => {\r\n        //alert(JSON.stringify(props))\r\n        props.loadData()\r\n    }\r\n   \r\n    const onPanProofChange = (event) => {\r\n        setPanDoc(event.target.files[0]);\r\n    }\r\n    const onGSTINProofChange = (event) => {\r\n        setGSTDoc(event.target.files[0])\r\n    }\r\n    if(loading===true){\r\n        return(\r\n            <Spinner />\r\n        )\r\n    }\r\n    \r\n        return(\r\n            <div style={{overflow:'hidden'}} >\r\n                \r\n                {/* <Typography fullWidth className={classes.title} gutterBottom style={{ backgroundColor: '#66bb6a' }}>\r\n                            Pending KYC\r\n                </Typography> */}\r\n                        <form>\r\n                          \r\n                {/* <Typography className={classes.formHeadings} >Tax Details</Typography> */}\r\n                    <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n                    \r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"pan\"\r\n                            name=\"pan\"\r\n                            value={myState.pan}\r\n                            onChange={(event)=>fieldsChange(event)}\r\n                            label=\"Enter PAN No.\"\r\n                            fullWidth                            \r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            required\r\n                            type=\"text\"\r\n                            id=\"gstin\"\r\n                            name=\"gstin\"\r\n                            value={myState.gstin}\r\n                            onChange={(event)=>fieldsChange(event)}\r\n                            label=\"GSTIN\"\r\n                            fullWidth                            \r\n                        />\r\n                    </Grid>\r\n                    </Grid>\r\n                    \r\n                    <Typography className={classes.formHeadings} >Documents Upload</Typography>\r\n                        <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n                         <Grid item xs={12} >\r\n                        <label>Pan Card: </label>\r\n                        <input   style={{marginLeft:'15px'}} type=\"file\" onChange={(event) => onPanProofChange(event)}  /> \r\n                        </Grid>\r\n                        <Grid item xs={12} >\r\n                        <label>GSTIN: </label>\r\n                        <input   style={{marginLeft:'15px'}} type=\"file\" onChange={(event) => onGSTINProofChange(event)}  /> \r\n                        </Grid>\r\n                        </Grid>\r\n\r\n\r\n                                  \r\n                \r\n                <Button \r\n                    onClick={submitKYC}\r\n                    className=\"row AllButtons\"\r\n                    variant='contained' style={{float:'right', marginBottom:'10px'}}\r\n            >Submit KYC</Button>\r\n            \r\n            \r\n        </form>\r\n            </div>\r\n        );\r\n    \r\n}\r\nexport default CompanyKYC","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\AccountDetails\\AccountForm.js",["355","356","357","358","359"],"import React,{useEffect, useState} from 'react'\r\nimport Spinner from '../../UI/Spinner'\r\nimport Typography from '@material-ui/core/Typography';\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport {Auth,API} from 'aws-amplify'\r\nimport \"../../../Globalcss/globalcss.css\"\r\nimport {\r\n    TextField,\r\n    Grid,\r\n    Button,\r\n    Breadcrumbs\r\n} from '@material-ui/core'\r\nconst useStyles = makeStyles({\r\n    root: {\r\n       minWidth: 275,\r\n    },\r\n    title: {\r\n      fontSize: 20,\r\n      height: 50,\r\n      padding: 10,\r\n      paddingLeft: 55,\r\n      color: 'white'\r\n    },\r\n    formHeadings: {\r\n      margin: 20,\r\n      marginBottom: 0\r\n    }\r\n  });\r\n\r\n\r\nconst AccountInfoForm = (props) => {\r\n   \r\n    const classes = useStyles()\r\n    const [loading,setLoading] = useState(false)\r\n    const [myState,setMyState] = useState({\r\n        accountHolderName:'',\r\n        accountNumber:'',\r\n        ifscCode:''\r\n    })\r\n    const submitKYC =  () => {\r\n        setLoading(true)\r\n        Auth.currentUserInfo()\r\n            .then((userDetails)=>{\r\n            const payload={\r\n            body:{\r\n                id:userDetails.username,\r\n                type:'customer',\r\n                kycInformation:{\r\n                    accountInfo:{\r\n                        accountHolderName:myState.accountHolderName,\r\n                        accountNumber:myState.accountNumber,\r\n                        ifscCode:myState.ifscCode\r\n                        }\r\n            }\r\n         }\r\n        }\r\n                            API.post(\"GoFlexeOrderPlacement\",'/kyc/info?type='+'customer',payload)\r\n                            .then(resp=> console.log(resp))\r\n                            .catch(err => console.log(err))\r\n                           \r\n                            fun()\r\n                    })\r\n                    .catch(err => console.log(err))\r\n                    setLoading(false)\r\n        \r\n    }\r\n    const fun = () => {\r\n        //alert(JSON.stringify(props))\r\n        props.loadData()\r\n    }\r\n    const fieldsChange = (event) => {\r\n        setMyState({...myState,[event.target.name]:event.target.value})\r\n    }\r\n    if(loading===true){\r\n        return(\r\n            <Spinner />\r\n        )\r\n    }\r\n    \r\n        return(\r\n            <div style={{overflow:'hidden'}} >\r\n                {/* <Breadcrumbs style={{marginBottom:'10px'}} aria-label=\"breadcrumb\">\r\n        <Link color=\"inherit\" onClick={() => fun('')}>\r\n            KYC\r\n        </Link>\r\n            <Typography color=\"textPrimary\">Account KYC</Typography>\r\n    </Breadcrumbs> */}\r\n                {/* <Typography fullWidth className={classes.title} gutterBottom style={{ backgroundColor: '#66bb6a' }}>\r\n                            Pending KYC\r\n                        </Typography> */}\r\n                        <form>\r\n                          \r\n                        {/* <Typography className={classes.formHeadings} >Account Details</Typography> */}\r\n                    <Grid container spacing={3} style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}>\r\n                    \r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            type=\"text\"\r\n                            id=\"accountHolderName\"\r\n                            name=\"accountHolderName\"\r\n                            value={myState.accountHolderName}\r\n                            onChange={(event)=>fieldsChange(event)}\r\n                            label=\"Account Holder's Name\"\r\n                            fullWidth                            \r\n                     \r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            type=\"text\"\r\n                            id=\"accountNumber\"\r\n                            name=\"accountNumber\"\r\n                            label=\"Account Number\"\r\n                            value={myState.accountNumber}\r\n                            onChange={(event)=>fieldsChange(event)}\r\n                            fullWidth                            \r\n                            \r\n                        />\r\n                    </Grid>\r\n                    <Grid item xs={12} sm={6}>\r\n                        <TextField\r\n                            type=\"text\"\r\n                            id=\"ifscCode\"\r\n                            name=\"ifscCode\"\r\n                            value={myState.ifscCode}\r\n                            onChange={(event)=>fieldsChange(event)}\r\n                            label=\"IFSC Code\"\r\n                            fullWidth                            \r\n                    \r\n                        />\r\n                    </Grid>\r\n                \r\n\r\n\r\n                    </Grid>                    \r\n                \r\n                <Button \r\n                    onClick={submitKYC}\r\n                    className=\"row AllButtons\"\r\n                    variant='contained' style={{float:'right', marginBottom:'10px'}}\r\n            >Submit KYC</Button>\r\n            \r\n            \r\n        </form>\r\n            </div>\r\n        );\r\n    \r\n}\r\nexport default AccountInfoForm","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\KYCPage.js",["360","361"],"import React, { useEffect, useState } from \"react\";\r\nimport Spinner from \"../UI/Spinner\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport { Auth, API } from \"aws-amplify\";\r\nimport axios from \"axios\";\r\nimport { TextField, Grid, Button } from \"@material-ui/core\";\r\nconst useStyles = makeStyles({\r\n  root: {\r\n    minWidth: 275,\r\n  },\r\n  title: {\r\n    fontSize: 20,\r\n    height: 50,\r\n    padding: 10,\r\n    paddingLeft: 55,\r\n    color: \"white\",\r\n  },\r\n  formHeadings: {\r\n    margin: 20,\r\n    marginBottom: 0,\r\n  },\r\n});\r\n\r\nconst CompanyKYC = (props) => {\r\n  const [report, setReport] = useState(null);\r\n  const [pan, setPan] = useState();\r\n  const [accountHolderName, setAccountHolderName] = useState();\r\n  const [accountNumber, setAccountNumber] = useState();\r\n  const [ifscCode, setIfscCode] = useState();\r\n  const [panProof, setPanProof] = useState();\r\n  const [panLink, setPanLink] = useState();\r\n  const [loading, setLoading] = useState(false);\r\n  const [uploadsDone, setUploadsDone] = useState(true);\r\n  const classes = useStyles();\r\n  useEffect(() => {\r\n    setReport({\r\n      status: \"pending\",\r\n      gstin: \"\",\r\n      pan: \"\",\r\n    });\r\n  }, []);\r\n\r\n  async function uploadPan() {\r\n    const metaData = {\r\n      contentType: panProof.type,\r\n    };\r\n    const payload = {\r\n      body: {\r\n        contentType: panProof.type,\r\n        metaData: metaData,\r\n      },\r\n    };\r\n    var initiateResult;\r\n    try {\r\n      initiateResult = await API.post(\r\n        \"GoFlexeOrderPlacement\",\r\n        \"/kyc/document?type=\" + \"customer\",\r\n        payload\r\n      );\r\n      axios\r\n        .put(initiateResult.s3PutObjectUrl, panProof, {\r\n          headers: {\r\n            \"Content-Type\": panProof.type,\r\n          },\r\n        })\r\n        .then((resp) => {\r\n          console.log(resp);\r\n          setPanLink(\r\n            `uploads/kycdocuments/${initiateResult.fileId}.${panProof.type}`\r\n          );\r\n        })\r\n        .catch((err) => {\r\n          console.log(err);\r\n          setUploadsDone(false);\r\n        });\r\n    } catch (err) {\r\n      setPanLink(`fake/link/sinceDocUploadHasfailed`);\r\n      console.log(err);\r\n    }\r\n  }\r\n\r\n  const submitKYC = async () => {\r\n    // alert(pan+accountHolderName+accountNumber+ifscCode+panProof.name)\r\n    // setLoading(true)\r\n    await uploadPan();\r\n\r\n    if (uploadsDone === false) {\r\n      alert(\"Please Try Again\");\r\n      return;\r\n    }\r\n    const userDetails = await Auth.currentUserInfo();\r\n    const payload = {\r\n      body: {\r\n        id: userDetails.username,\r\n        type: \"customer\",\r\n        kycInformation: {\r\n          pan: pan,\r\n          accountHolderName: accountHolderName,\r\n          ifscCode: ifscCode,\r\n          panLink: panLink,\r\n          accountNumber: accountNumber,\r\n        },\r\n      },\r\n    };\r\n    await API.post(\"GoFlexeOrderPlacement\", \"/kyc/info\", payload)\r\n      .then((resp) => console.log(resp))\r\n      .catch((err) => console.log(err));\r\n\r\n    alert(\"Submitted Successfully\");\r\n    setLoading(false);\r\n  };\r\n\r\n  const onPanChange = (event) => {\r\n    setPan(event.target.value);\r\n  };\r\n  const onPanProofChange = (event) => {\r\n    setPanProof(event.target.files[0]);\r\n  };\r\n  const onAccountHolderNameChange = (event) => {\r\n    setAccountHolderName(event.target.value);\r\n  };\r\n  const onAccountNumberChange = (event) => {\r\n    setAccountNumber(event.target.value);\r\n  };\r\n  const onIfscCodeChange = (event) => {\r\n    setIfscCode(event.target.value);\r\n  };\r\n  if (report === null) {\r\n    return <Spinner />;\r\n  }\r\n  if (report.status !== \"pending\") {\r\n    return (\r\n      <div>\r\n        <Typography\r\n          fullWidth\r\n          className={classes.title}\r\n          gutterBottom\r\n          style={{ backgroundColor: \"#66bb6a\" }}\r\n        >\r\n          No Pending KYC\r\n        </Typography>\r\n      </div>\r\n    );\r\n  }\r\n  if (report.status === \"pending\") {\r\n    return (\r\n      <div style={{ overflow: \"hidden\" }}>\r\n        <Typography\r\n          fullWidth\r\n          className={classes.title}\r\n          gutterBottom\r\n          style={{ backgroundColor: \"#66bb6a\" }}\r\n        >\r\n          Pending KYC\r\n        </Typography>\r\n        <form>\r\n          <Typography className={classes.formHeadings}>PAN Details</Typography>\r\n\r\n          {/*test*/}\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                required\r\n                type=\"text\"\r\n                id=\"pan\"\r\n                name=\"pan\"\r\n                label=\"Enter PAN\"\r\n                fullWidth\r\n                value={pan}\r\n                onChange={(event) => onPanChange(event)}\r\n              />\r\n            </Grid>\r\n          </Grid>\r\n          <Typography className={classes.formHeadings}>\r\n            Account Details\r\n          </Typography>\r\n          <Grid\r\n            container\r\n            spacing={3}\r\n            style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n          >\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                type=\"text\"\r\n                id=\"accountHolderName\"\r\n                name=\"accountHolderName\"\r\n                label=\"Account Holder's Name\"\r\n                fullWidth\r\n                value={accountHolderName}\r\n                onChange={(event) => onAccountHolderNameChange(event)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                type=\"text\"\r\n                id=\"accountNumber\"\r\n                name=\"accountNumber\"\r\n                label=\"Account Number\"\r\n                fullWidth\r\n                value={accountNumber}\r\n                onChange={(event) => onAccountNumberChange(event)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}>\r\n              <TextField\r\n                type=\"text\"\r\n                id=\"ifscCode\"\r\n                name=\"ifscCode\"\r\n                label=\"IFSC Code\"\r\n                fullWidth\r\n                value={ifscCode}\r\n                onChange={(event) => onIfscCodeChange(event)}\r\n              />\r\n            </Grid>\r\n            <Grid item xs={12} sm={6}></Grid>\r\n            <Typography className={classes.formHeadings}>\r\n              Documents Upload\r\n            </Typography>\r\n            <Grid\r\n              container\r\n              spacing={3}\r\n              style={{ padding: 50, paddingTop: 10, paddingBottom: 30 }}\r\n            >\r\n              <Grid item xs={12}>\r\n                <label>Pan Proof: </label>\r\n                <input\r\n                  style={{ marginLeft: \"15px\" }}\r\n                  type=\"file\"\r\n                  onChange={(event) => onPanProofChange(event)}\r\n                />\r\n              </Grid>\r\n            </Grid>\r\n          </Grid>\r\n\r\n          <Button\r\n            onClick={submitKYC}\r\n            className=\"row\"\r\n            variant=\"contained\"\r\n            style={{\r\n              float: \"right\",\r\n              backgroundColor: \"#f9a825\",\r\n              marginBottom: \"10px\",\r\n            }}\r\n          >\r\n            Submit KYC\r\n          </Button>\r\n        </form>\r\n      </div>\r\n    );\r\n  }\r\n};\r\nexport default CompanyKYC;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\KYC\\CompanyKycPanel.js",["362","363","364","365","366","367","368"],"import React, { useEffect, useState } from \"react\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport { makeStyles } from \"@material-ui/core/styles\";\r\nimport Accordion from \"@material-ui/core/Accordion\";\r\nimport AccordionDetails from \"@material-ui/core/AccordionDetails\";\r\nimport AccordionSummary from \"@material-ui/core/AccordionSummary\";\r\nimport ExpandMoreIcon from \"@material-ui/icons/ExpandMore\";\r\n\r\nimport CompanyKYCForm from \"./CompanyKYCForm\";\r\nimport IndexCompanyDetails from \"./CompanyDetails/IndexCompanyDetails\";\r\nimport FormCompanyDetails from \"./CompanyDetails/FormCompanyDetails\";\r\nimport TaxForm from \"./TaxDetails/TaxForm\";\r\nimport TaxIndex from \"./TaxDetails/TaxIndex\";\r\nimport AccountInfoForm from \"./AccountDetails/AccountForm\";\r\nimport AccountIndex from \"./AccountDetails/AccountIndex\";\r\nimport Tooltip from \"@material-ui/core/Tooltip\";\r\n\r\nimport { Button, Card, Grid, IconButton } from \"@material-ui/core\"; \r\nimport Done from \"@material-ui/icons/Done\";\r\nimport WarningIcon from '@material-ui/icons/Warning';\r\n\r\nimport {Auth,API} from 'aws-amplify'\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: \"100%\",\r\n  },\r\n  heading: {\r\n    fontSize: theme.typography.pxToRem(15),\r\n    fontWeight: theme.typography.fontWeightRegular,\r\n  },\r\n}));\r\n\r\nconst KYCPanel = () => {\r\n  const classes = useStyles();\r\n  const [pressed, setPressed] = useState(true);\r\n  const [page, setPage] = useState(\"\");\r\n  const [loading,setLoading] = useState('true')\r\n  const [companyDetails,setCompanyDetails] = useState(null)\r\n  const [taxDetails,setTaxDetails] = useState(null)\r\n  const [accountDetails,setAccountDetails] = useState(null)\r\n  \r\n  function loadData(){\r\n    setLoading('true')\r\n    Auth.currentUserInfo()\r\n    .then((userDetails)=>{\r\n      API.get(\"GoFlexeOrderPlacement\",`/kyc/info?type=customer&id=${userDetails.username}`)\r\n      .then(resp=> {\r\n        console.log(resp)\r\n        if(resp.length===0){\r\n          setCompanyDetails(null)\r\n          setTaxDetails(null)\r\n          setAccountDetails(null)\r\n        }\r\n        else{\r\n          if(resp[0].companyInfo!==undefined){\r\n            setCompanyDetails(resp[0].companyInfo)\r\n          }\r\n          if(resp[0].accountInfo!==undefined){\r\n            setAccountDetails(resp[0].accountInfo)\r\n          }\r\n          if(resp[0].taxInfo!==undefined){\r\n            setTaxDetails(resp[0].taxInfo)\r\n          }\r\n          //setCompanyDetails(resp[0].)\r\n          //setRows(resp[0].trucks)\r\n        }\r\n        setLoading('false')\r\n      })\r\n      .catch(err => {\r\n        console.log(err)\r\n        setLoading('error')\r\n      })\r\n    })\r\n    .catch(err => {\r\n      console.log(err)\r\n      setLoading('error')\r\n    })\r\n  }\r\n  useEffect(()=>{\r\n    loadData()\r\n  },[])\r\n\r\n  const press = () => {\r\n    setPressed(!pressed);\r\n  };\r\n  const changePage = (page) => {\r\n    setPage(page);\r\n   \r\n  };\r\n\r\n  const displayPanel = (\r\n    <div className={classes.root}>\r\n      <Accordion >\r\n        <AccordionSummary\r\n          style={{ \r\n            backgroundColor: 'rgba(0, 0, 0, .03)',\r\n    borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n          }}\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1bh-content\"\r\n          id=\"panel1bh-header\"\r\n        >\r\n          <Typography\r\n            fullWidth\r\n            className={classes.title}\r\n            gutterBottom\r\n            inline\r\n            variant=\"body1\"\r\n            align=\"left\"\r\n          >\r\n            Company Info {\" \"}\r\n\r\n            {companyDetails!==null ?\r\n\r\n            <Tooltip title=\"Done\">\r\n              <Done style={{ color: \"green\" }} />\r\n            </Tooltip>   :\r\n            <Tooltip title=\"Pending\">\r\n              <WarningIcon style={{ color: \"orange\" }} />\r\n            </Tooltip> }\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            {companyDetails===null ?<FormCompanyDetails loadData={loadData} />: <IndexCompanyDetails companyDetails={companyDetails} changePage={changePage} />}\r\n            \r\n            \r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n\r\n\r\n      <Accordion>\r\n        <AccordionSummary\r\n          style={{ \r\n            backgroundColor: 'rgba(0, 0, 0, .03)',\r\n            borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n          }}\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1bh-content\"\r\n          id=\"panel1bh-header\"\r\n        >\r\n          <Typography\r\n            fullWidth\r\n            className={classes.title}\r\n            gutterBottom\r\n            inline\r\n            variant=\"body1\"\r\n            align=\"left\"\r\n          >\r\n            Tax Info {\" \"}\r\n            {taxDetails!==null ?\r\n              <Tooltip title=\"Done\">\r\n                <Done style={{ color: \"green\" }} />\r\n              </Tooltip>   :\r\n              <Tooltip title=\"Pending\">\r\n                <WarningIcon style={{ color: \"orange\" }} />\r\n              </Tooltip> }\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            {taxDetails===null ?<TaxForm loadData={loadData}/>:<TaxIndex taxDetails={taxDetails} changePage={changePage} /> }\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n      <Accordion>\r\n        <AccordionSummary\r\n          style={{ \r\n            backgroundColor: 'rgba(0, 0, 0, .03)',\r\n            borderBottom: '1px solid rgba(0, 0, 0, .125)',\r\n          }}\r\n          expandIcon={<ExpandMoreIcon />}\r\n          aria-controls=\"panel1bh-content\"\r\n          id=\"panel1bh-header\"\r\n        >\r\n          <Typography\r\n            fullWidth\r\n            className={classes.title}\r\n            gutterBottom\r\n            //style={{ backgroundColor: \"#DCDCDC\", color: \"#3f51b5\" }}\r\n            inline\r\n            variant=\"body1\"\r\n            align=\"left\"\r\n          >\r\n            Account Info {\" \"}\r\n            {accountDetails!==null ?\r\n              <Tooltip title=\"Done\">\r\n                <Done style={{ color: \"green\" }} />\r\n              </Tooltip>   :\r\n              <Tooltip title=\"Pending\">\r\n                <WarningIcon style={{ color: \"orange\" }} />\r\n              </Tooltip> }\r\n          </Typography>\r\n        </AccordionSummary>\r\n        <AccordionDetails>\r\n          <Typography>\r\n            {accountDetails===null ? <AccountInfoForm loadData={loadData} />:<AccountIndex accountDetails={accountDetails} changePage={changePage} />}\r\n          </Typography>\r\n        </AccordionDetails>\r\n      </Accordion>\r\n    </div>\r\n  );\r\n\r\n  return (\r\n    <React.Fragment>\r\n      {/* <Button onClick={() => press()}>press</Button> */}\r\n      {pressed && displayPanel}\r\n      {!pressed && <CompanyKYCForm />}\r\n    </React.Fragment>\r\n  );\r\n};\r\n\r\nexport default KYCPanel;\r\n","C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\PaymentIndex.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\PriceCalculator\\PriceCalculator.js",["369","370","371","372","373"],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Upload\\Upload.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Progress\\Progress.js",[],"C:\\Users\\Administrator\\Desktop\\cd\\src\\components\\Payments\\Dropzone\\Dropzone.js",[],{"ruleId":"374","replacedBy":"375"},{"ruleId":"376","replacedBy":"377"},{"ruleId":"378","severity":1,"message":"379","line":38,"column":16,"nodeType":"380","messageId":"381","endLine":38,"endColumn":19},{"ruleId":"382","severity":1,"message":"383","line":28,"column":5,"nodeType":"384","messageId":"385","endLine":146,"endColumn":6},{"ruleId":"382","severity":1,"message":"383","line":12,"column":5,"nodeType":"384","messageId":"385","endLine":48,"endColumn":6},{"ruleId":"386","severity":1,"message":"387","line":106,"column":17,"nodeType":"388","endLine":106,"endColumn":54},{"ruleId":"386","severity":1,"message":"387","line":142,"column":13,"nodeType":"388","endLine":142,"endColumn":50},{"ruleId":"386","severity":1,"message":"387","line":297,"column":25,"nodeType":"388","endLine":297,"endColumn":92},{"ruleId":"378","severity":1,"message":"379","line":2,"column":9,"nodeType":"380","messageId":"381","endLine":2,"endColumn":12},{"ruleId":"389","severity":1,"message":"390","line":231,"column":17,"nodeType":"380","messageId":"391","endLine":231,"endColumn":18},{"ruleId":"378","severity":1,"message":"392","line":3,"column":8,"nodeType":"380","messageId":"381","endLine":3,"endColumn":15},{"ruleId":"378","severity":1,"message":"393","line":7,"column":8,"nodeType":"380","messageId":"381","endLine":7,"endColumn":17},{"ruleId":"394","severity":1,"message":"395","line":54,"column":13,"nodeType":"396","endLine":69,"endColumn":4},{"ruleId":"397","severity":1,"message":"398","line":118,"column":19,"nodeType":"388","endLine":118,"endColumn":23},{"ruleId":"399","severity":1,"message":"400","line":194,"column":20,"nodeType":"401","messageId":"402","endLine":194,"endColumn":22},{"ruleId":"394","severity":1,"message":"403","line":122,"column":6,"nodeType":"404","endLine":122,"endColumn":8,"suggestions":"405"},{"ruleId":"394","severity":1,"message":"406","line":66,"column":4,"nodeType":"404","endLine":66,"endColumn":6,"suggestions":"407"},{"ruleId":"378","severity":1,"message":"408","line":6,"column":9,"nodeType":"380","messageId":"381","endLine":6,"endColumn":13},{"ruleId":"378","severity":1,"message":"409","line":7,"column":8,"nodeType":"380","messageId":"381","endLine":7,"endColumn":16},{"ruleId":"378","severity":1,"message":"410","line":8,"column":8,"nodeType":"380","messageId":"381","endLine":8,"endColumn":18},{"ruleId":"378","severity":1,"message":"392","line":11,"column":5,"nodeType":"380","messageId":"381","endLine":11,"endColumn":12},{"ruleId":"378","severity":1,"message":"411","line":49,"column":11,"nodeType":"380","messageId":"381","endLine":49,"endColumn":18},{"ruleId":"378","severity":1,"message":"412","line":12,"column":7,"nodeType":"380","messageId":"381","endLine":12,"endColumn":16},{"ruleId":"378","severity":1,"message":"413","line":44,"column":18,"nodeType":"380","messageId":"381","endLine":44,"endColumn":26},{"ruleId":"399","severity":1,"message":"400","line":65,"column":17,"nodeType":"401","messageId":"402","endLine":65,"endColumn":19},{"ruleId":"389","severity":1,"message":"390","line":171,"column":17,"nodeType":"380","messageId":"391","endLine":171,"endColumn":18},{"ruleId":"386","severity":1,"message":"387","line":103,"column":17,"nodeType":"388","endLine":103,"endColumn":54},{"ruleId":"394","severity":1,"message":"414","line":93,"column":9,"nodeType":"404","endLine":93,"endColumn":11,"suggestions":"415"},{"ruleId":"394","severity":1,"message":"416","line":52,"column":5,"nodeType":"404","endLine":52,"endColumn":7,"suggestions":"417"},{"ruleId":"378","severity":1,"message":"418","line":353,"column":8,"nodeType":"380","messageId":"381","endLine":353,"endColumn":16},{"ruleId":"378","severity":1,"message":"419","line":357,"column":3,"nodeType":"380","messageId":"381","endLine":357,"endColumn":7},{"ruleId":"378","severity":1,"message":"420","line":366,"column":10,"nodeType":"380","messageId":"381","endLine":366,"endColumn":21},{"ruleId":"378","severity":1,"message":"421","line":426,"column":10,"nodeType":"380","messageId":"381","endLine":426,"endColumn":14},{"ruleId":"378","severity":1,"message":"422","line":430,"column":23,"nodeType":"380","messageId":"381","endLine":430,"endColumn":37},{"ruleId":"378","severity":1,"message":"423","line":432,"column":9,"nodeType":"380","messageId":"381","endLine":432,"endColumn":26},{"ruleId":"394","severity":1,"message":"424","line":475,"column":6,"nodeType":"404","endLine":475,"endColumn":8,"suggestions":"425"},{"ruleId":"378","severity":1,"message":"426","line":547,"column":9,"nodeType":"380","messageId":"381","endLine":547,"endColumn":30},{"ruleId":"389","severity":1,"message":"427","line":577,"column":13,"nodeType":"380","messageId":"391","endLine":577,"endColumn":17},{"ruleId":"378","severity":1,"message":"428","line":4,"column":8,"nodeType":"380","messageId":"381","endLine":4,"endColumn":17},{"ruleId":"394","severity":1,"message":"395","line":60,"column":15,"nodeType":"396","endLine":69,"endColumn":6},{"ruleId":"378","severity":1,"message":"429","line":61,"column":13,"nodeType":"380","messageId":"381","endLine":61,"endColumn":24},{"ruleId":"394","severity":1,"message":"430","line":69,"column":7,"nodeType":"404","endLine":69,"endColumn":9,"suggestions":"431"},{"ruleId":"378","severity":1,"message":"432","line":8,"column":3,"nodeType":"380","messageId":"381","endLine":8,"endColumn":19},{"ruleId":"378","severity":1,"message":"433","line":10,"column":3,"nodeType":"380","messageId":"381","endLine":10,"endColumn":14},{"ruleId":"378","severity":1,"message":"434","line":11,"column":3,"nodeType":"380","messageId":"381","endLine":11,"endColumn":13},{"ruleId":"378","severity":1,"message":"435","line":17,"column":8,"nodeType":"380","messageId":"381","endLine":17,"endColumn":15},{"ruleId":"378","severity":1,"message":"420","line":22,"column":10,"nodeType":"380","messageId":"381","endLine":22,"endColumn":21},{"ruleId":"394","severity":1,"message":"395","line":38,"column":13,"nodeType":"396","endLine":52,"endColumn":4},{"ruleId":"378","severity":1,"message":"436","line":156,"column":19,"nodeType":"380","messageId":"381","endLine":156,"endColumn":26},{"ruleId":"378","severity":1,"message":"437","line":1,"column":15,"nodeType":"380","messageId":"381","endLine":1,"endColumn":24},{"ruleId":"378","severity":1,"message":"438","line":13,"column":9,"nodeType":"380","messageId":"381","endLine":13,"endColumn":13},{"ruleId":"378","severity":1,"message":"439","line":55,"column":12,"nodeType":"380","messageId":"381","endLine":55,"endColumn":26},{"ruleId":"378","severity":1,"message":"440","line":92,"column":11,"nodeType":"380","messageId":"381","endLine":92,"endColumn":30},{"ruleId":"378","severity":1,"message":"441","line":2,"column":8,"nodeType":"380","messageId":"381","endLine":2,"endColumn":19},{"ruleId":"399","severity":1,"message":"400","line":94,"column":39,"nodeType":"401","messageId":"402","endLine":94,"endColumn":41},{"ruleId":"378","severity":1,"message":"437","line":1,"column":15,"nodeType":"380","messageId":"381","endLine":1,"endColumn":24},{"ruleId":"378","severity":1,"message":"442","line":2,"column":8,"nodeType":"380","messageId":"381","endLine":2,"endColumn":15},{"ruleId":"378","severity":1,"message":"408","line":3,"column":9,"nodeType":"380","messageId":"381","endLine":3,"endColumn":13},{"ruleId":"378","severity":1,"message":"419","line":5,"column":5,"nodeType":"380","messageId":"381","endLine":5,"endColumn":9},{"ruleId":"378","severity":1,"message":"441","line":6,"column":5,"nodeType":"380","messageId":"381","endLine":6,"endColumn":16},{"ruleId":"378","severity":1,"message":"443","line":7,"column":5,"nodeType":"380","messageId":"381","endLine":7,"endColumn":15},{"ruleId":"378","severity":1,"message":"444","line":10,"column":5,"nodeType":"380","messageId":"381","endLine":10,"endColumn":16},{"ruleId":"378","severity":1,"message":"411","line":32,"column":11,"nodeType":"380","messageId":"381","endLine":32,"endColumn":18},{"ruleId":"378","severity":1,"message":"445","line":33,"column":23,"nodeType":"380","messageId":"381","endLine":33,"endColumn":36},{"ruleId":"378","severity":1,"message":"446","line":36,"column":11,"nodeType":"380","messageId":"381","endLine":36,"endColumn":14},{"ruleId":"378","severity":1,"message":"437","line":1,"column":17,"nodeType":"380","messageId":"381","endLine":1,"endColumn":26},{"ruleId":"447","severity":1,"message":"448","line":62,"column":29,"nodeType":"401","messageId":"449","endLine":62,"endColumn":30},{"ruleId":"447","severity":1,"message":"448","line":86,"column":37,"nodeType":"401","messageId":"449","endLine":86,"endColumn":38},{"ruleId":"447","severity":1,"message":"448","line":110,"column":45,"nodeType":"401","messageId":"449","endLine":110,"endColumn":46},{"ruleId":"447","severity":1,"message":"448","line":157,"column":53,"nodeType":"401","messageId":"449","endLine":157,"endColumn":54},{"ruleId":"378","severity":1,"message":"437","line":1,"column":15,"nodeType":"380","messageId":"381","endLine":1,"endColumn":24},{"ruleId":"378","severity":1,"message":"442","line":2,"column":8,"nodeType":"380","messageId":"381","endLine":2,"endColumn":15},{"ruleId":"378","severity":1,"message":"408","line":3,"column":9,"nodeType":"380","messageId":"381","endLine":3,"endColumn":13},{"ruleId":"378","severity":1,"message":"419","line":5,"column":5,"nodeType":"380","messageId":"381","endLine":5,"endColumn":9},{"ruleId":"378","severity":1,"message":"441","line":6,"column":5,"nodeType":"380","messageId":"381","endLine":6,"endColumn":16},{"ruleId":"378","severity":1,"message":"443","line":7,"column":5,"nodeType":"380","messageId":"381","endLine":7,"endColumn":15},{"ruleId":"378","severity":1,"message":"444","line":10,"column":5,"nodeType":"380","messageId":"381","endLine":10,"endColumn":16},{"ruleId":"378","severity":1,"message":"411","line":32,"column":11,"nodeType":"380","messageId":"381","endLine":32,"endColumn":18},{"ruleId":"378","severity":1,"message":"450","line":33,"column":23,"nodeType":"380","messageId":"381","endLine":33,"endColumn":36},{"ruleId":"378","severity":1,"message":"446","line":35,"column":11,"nodeType":"380","messageId":"381","endLine":35,"endColumn":14},{"ruleId":"451","severity":1,"message":"452","line":72,"column":141,"nodeType":"453","endLine":72,"endColumn":158},{"ruleId":"378","severity":1,"message":"437","line":1,"column":17,"nodeType":"380","messageId":"381","endLine":1,"endColumn":26},{"ruleId":"378","severity":1,"message":"444","line":9,"column":35,"nodeType":"380","messageId":"381","endLine":9,"endColumn":46},{"ruleId":"447","severity":1,"message":"448","line":55,"column":29,"nodeType":"401","messageId":"449","endLine":55,"endColumn":30},{"ruleId":"447","severity":1,"message":"448","line":86,"column":37,"nodeType":"401","messageId":"449","endLine":86,"endColumn":38},{"ruleId":"378","severity":1,"message":"437","line":1,"column":15,"nodeType":"380","messageId":"381","endLine":1,"endColumn":24},{"ruleId":"378","severity":1,"message":"442","line":2,"column":8,"nodeType":"380","messageId":"381","endLine":2,"endColumn":15},{"ruleId":"378","severity":1,"message":"408","line":3,"column":9,"nodeType":"380","messageId":"381","endLine":3,"endColumn":13},{"ruleId":"378","severity":1,"message":"419","line":5,"column":5,"nodeType":"380","messageId":"381","endLine":5,"endColumn":9},{"ruleId":"378","severity":1,"message":"441","line":6,"column":5,"nodeType":"380","messageId":"381","endLine":6,"endColumn":16},{"ruleId":"378","severity":1,"message":"443","line":7,"column":5,"nodeType":"380","messageId":"381","endLine":7,"endColumn":15},{"ruleId":"378","severity":1,"message":"444","line":10,"column":5,"nodeType":"380","messageId":"381","endLine":10,"endColumn":16},{"ruleId":"378","severity":1,"message":"411","line":32,"column":11,"nodeType":"380","messageId":"381","endLine":32,"endColumn":18},{"ruleId":"378","severity":1,"message":"454","line":33,"column":23,"nodeType":"380","messageId":"381","endLine":33,"endColumn":36},{"ruleId":"378","severity":1,"message":"446","line":35,"column":11,"nodeType":"380","messageId":"381","endLine":35,"endColumn":14},{"ruleId":"451","severity":1,"message":"452","line":50,"column":129,"nodeType":"453","endLine":50,"endColumn":146},{"ruleId":"451","severity":1,"message":"452","line":59,"column":131,"nodeType":"453","endLine":59,"endColumn":148},{"ruleId":"378","severity":1,"message":"437","line":1,"column":15,"nodeType":"380","messageId":"381","endLine":1,"endColumn":24},{"ruleId":"378","severity":1,"message":"444","line":13,"column":5,"nodeType":"380","messageId":"381","endLine":13,"endColumn":16},{"ruleId":"447","severity":1,"message":"448","line":60,"column":59,"nodeType":"401","messageId":"449","endLine":60,"endColumn":60},{"ruleId":"447","severity":1,"message":"448","line":79,"column":71,"nodeType":"401","messageId":"449","endLine":79,"endColumn":72},{"ruleId":"447","severity":1,"message":"448","line":105,"column":91,"nodeType":"401","messageId":"449","endLine":105,"endColumn":92},{"ruleId":"378","severity":1,"message":"437","line":1,"column":15,"nodeType":"380","messageId":"381","endLine":1,"endColumn":24},{"ruleId":"378","severity":1,"message":"443","line":3,"column":8,"nodeType":"380","messageId":"381","endLine":3,"endColumn":18},{"ruleId":"378","severity":1,"message":"444","line":11,"column":5,"nodeType":"380","messageId":"381","endLine":11,"endColumn":16},{"ruleId":"378","severity":1,"message":"411","line":33,"column":11,"nodeType":"380","messageId":"381","endLine":33,"endColumn":18},{"ruleId":"447","severity":1,"message":"448","line":57,"column":79,"nodeType":"401","messageId":"449","endLine":57,"endColumn":80},{"ruleId":"378","severity":1,"message":"455","line":33,"column":10,"nodeType":"380","messageId":"381","endLine":33,"endColumn":17},{"ruleId":"447","severity":1,"message":"448","line":58,"column":31,"nodeType":"401","messageId":"449","endLine":58,"endColumn":32},{"ruleId":"378","severity":1,"message":"456","line":18,"column":10,"nodeType":"380","messageId":"381","endLine":18,"endColumn":16},{"ruleId":"378","severity":1,"message":"419","line":18,"column":18,"nodeType":"380","messageId":"381","endLine":18,"endColumn":22},{"ruleId":"378","severity":1,"message":"457","line":18,"column":24,"nodeType":"380","messageId":"381","endLine":18,"endColumn":28},{"ruleId":"378","severity":1,"message":"458","line":18,"column":30,"nodeType":"380","messageId":"381","endLine":18,"endColumn":40},{"ruleId":"378","severity":1,"message":"459","line":37,"column":10,"nodeType":"380","messageId":"381","endLine":37,"endColumn":14},{"ruleId":"378","severity":1,"message":"455","line":38,"column":10,"nodeType":"380","messageId":"381","endLine":38,"endColumn":17},{"ruleId":"378","severity":1,"message":"460","line":84,"column":9,"nodeType":"380","messageId":"381","endLine":84,"endColumn":14},{"ruleId":"378","severity":1,"message":"420","line":27,"column":10,"nodeType":"380","messageId":"381","endLine":27,"endColumn":21},{"ruleId":"378","severity":1,"message":"421","line":86,"column":10,"nodeType":"380","messageId":"381","endLine":86,"endColumn":14},{"ruleId":"378","severity":1,"message":"423","line":99,"column":9,"nodeType":"380","messageId":"381","endLine":99,"endColumn":26},{"ruleId":"394","severity":1,"message":"424","line":142,"column":6,"nodeType":"404","endLine":142,"endColumn":8,"suggestions":"461"},{"ruleId":"389","severity":1,"message":"427","line":336,"column":13,"nodeType":"380","messageId":"391","endLine":336,"endColumn":17},"no-native-reassign",["462"],"no-negated-in-lhs",["463"],"no-unused-vars","'API' is defined but never used.","Identifier","unusedVar","default-case","Expected a default case.","SwitchStatement","missingDefaultCase","jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-redeclare","'i' is already defined.","redeclared","'Divider' is defined but never used.","'TodayIcon' is defined but never used.","react-hooks/exhaustive-deps","Effect callbacks are synchronous to prevent race conditions. Put the async function inside:\n\nuseEffect(() => {\n  async function fetchData() {\n    // You can await here\n    const response = await MyAPI.getData(someId);\n    // ...\n  }\n  fetchData();\n}, [someId]); // Or [] if effect doesn't need props or state\n\nLearn more about data fetching with Hooks: https://reactjs.org/link/hooks-data-fetching","ArrowFunctionExpression","jsx-a11y/heading-has-content","Headings must have content and the content must be accessible by a screen reader.","eqeqeq","Expected '===' and instead saw '=='.","BinaryExpression","unexpected","React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array.","ArrayExpression",["464"],"React Hook useEffect has a missing dependency: 'details'. Either include it or remove the dependency array. You can also do a functional update 'setDetails(d => ...)' if you only need 'details' in the 'setDetails' call.",["465"],"'Link' is defined but never used.","'EditIcon' is defined but never used.","'DeleteIcon' is defined but never used.","'classes' is assigned a value but never used.","'useStyles' is assigned a value but never used.","'setUsers' is assigned a value but never used.","React Hook useEffect has missing dependencies: 'props.chosenProducts', 'props.destinationPin', and 'props.pickupPin'. Either include them or remove the dependency array.",["466"],"React Hook useEffect has a missing dependency: 'props'. Either include it or remove the dependency array. However, 'props' will change when *any* prop changes, so the preferred fix is to destructure the 'props' object outside of the useEffect call and refer to those specific props inside useEffect.",["467"],"'InfoIcon' is defined but never used.","'Card' is defined but never used.","'Multiselect' is defined but never used.","'user' is assigned a value but never used.","'setCalculating' is assigned a value but never used.","'capabilityOptions' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'allProducts'. Either include it or remove the dependency array.",["468"],"'handlePlaceOrderClick' is assigned a value but never used.","'temp' is already defined.","'constants' is defined but never used.","'currentUser' is assigned a value but never used.","React Hook useEffect has a missing dependency: 'props.orderId'. Either include it or remove the dependency array.",["469"],"'FormControlLabel' is defined but never used.","'FormControl' is defined but never used.","'InputLabel' is defined but never used.","'Tooltip' is defined but never used.","'labelId' is assigned a value but never used.","'useEffect' is defined but never used.","'Auth' is defined but never used.","'newProductType' is assigned a value but never used.","'onProductTypeChange' is assigned a value but never used.","'CardContent' is defined but never used.","'Spinner' is defined but never used.","'Typography' is defined but never used.","'Breadcrumbs' is defined but never used.","'setAccDetails' is assigned a value but never used.","'fun' is assigned a value but never used.","no-useless-concat","Unexpected string concatenation of literals.","unexpectedConcat","'setComDetails' is assigned a value but never used.","react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","JSXAttribute","'setTaxDetails' is assigned a value but never used.","'loading' is assigned a value but never used.","'Button' is defined but never used.","'Grid' is defined but never used.","'IconButton' is defined but never used.","'page' is assigned a value but never used.","'press' is assigned a value but never used.",["470"],"no-global-assign","no-unsafe-negation",{"desc":"471","fix":"472"},{"desc":"473","fix":"474"},{"desc":"475","fix":"476"},{"desc":"471","fix":"477"},{"desc":"478","fix":"479"},{"desc":"480","fix":"481"},{"desc":"478","fix":"482"},"Update the dependencies array to be: [props]",{"range":"483","text":"484"},"Update the dependencies array to be: [details]",{"range":"485","text":"486"},"Update the dependencies array to be: [props.chosenProducts, props.destinationPin, props.pickupPin]",{"range":"487","text":"488"},{"range":"489","text":"484"},"Update the dependencies array to be: [allProducts]",{"range":"490","text":"491"},"Update the dependencies array to be: [props.orderId]",{"range":"492","text":"493"},{"range":"494","text":"491"},[3403,3405],"[props]",[2231,2233],"[details]",[3087,3089],"[props.chosenProducts, props.destinationPin, props.pickupPin]",[1573,1575],[16704,16706],"[allProducts]",[1808,1810],"[props.orderId]",[4045,4047]]